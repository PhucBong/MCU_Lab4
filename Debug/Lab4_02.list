
Lab4_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003194  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080032a0  080032a0  000132a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c4  080032c4  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080032c4  080032c4  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032c4  080032c4  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c4  080032c4  000132c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080032cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  2000003c  08003308  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08003308  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000956f  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b90  00000000  00000000  000295d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002b168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  0002bc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016abb  00000000  00000000  0002c650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7c0  00000000  00000000  0004310b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826d9  00000000  00000000  0004e8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0fa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b68  00000000  00000000  000d0ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003288 	.word	0x08003288

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08003288 	.word	0x08003288

0800014c <initLedTime>:

int mode = 1;
int redValue, amberValue, greenValue;
int redNew, amberNew, greenNew;

void initLedTime(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	redValue = RED_INIT;
 8000150:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <initLedTime+0x38>)
 8000152:	221e      	movs	r2, #30
 8000154:	601a      	str	r2, [r3, #0]
	amberValue = AMBER_INIT;
 8000156:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <initLedTime+0x3c>)
 8000158:	2205      	movs	r2, #5
 800015a:	601a      	str	r2, [r3, #0]
	greenValue = GREEN_INIT;
 800015c:	4b0b      	ldr	r3, [pc, #44]	; (800018c <initLedTime+0x40>)
 800015e:	2219      	movs	r2, #25
 8000160:	601a      	str	r2, [r3, #0]
	redNew = redValue;
 8000162:	4b08      	ldr	r3, [pc, #32]	; (8000184 <initLedTime+0x38>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	4a0a      	ldr	r2, [pc, #40]	; (8000190 <initLedTime+0x44>)
 8000168:	6013      	str	r3, [r2, #0]
	amberNew = amberValue;
 800016a:	4b07      	ldr	r3, [pc, #28]	; (8000188 <initLedTime+0x3c>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a09      	ldr	r2, [pc, #36]	; (8000194 <initLedTime+0x48>)
 8000170:	6013      	str	r3, [r2, #0]
	greenNew = greenValue;
 8000172:	4b06      	ldr	r3, [pc, #24]	; (800018c <initLedTime+0x40>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	4a08      	ldr	r2, [pc, #32]	; (8000198 <initLedTime+0x4c>)
 8000178:	6013      	str	r3, [r2, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	20000014 	.word	0x20000014
 8000188:	2000001c 	.word	0x2000001c
 800018c:	20000018 	.word	0x20000018
 8000190:	20000020 	.word	0x20000020
 8000194:	20000028 	.word	0x20000028
 8000198:	20000024 	.word	0x20000024

0800019c <increaseNewValue>:


enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND};
enum ButtonState buttonState[3] = {BUTTON_RELEASED};

static void increaseNewValue(){
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	switch (mode) {
 80001a0:	4b1e      	ldr	r3, [pc, #120]	; (800021c <increaseNewValue+0x80>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2b04      	cmp	r3, #4
 80001a6:	d020      	beq.n	80001ea <increaseNewValue+0x4e>
 80001a8:	2b04      	cmp	r3, #4
 80001aa:	dc2b      	bgt.n	8000204 <increaseNewValue+0x68>
 80001ac:	2b02      	cmp	r3, #2
 80001ae:	d002      	beq.n	80001b6 <increaseNewValue+0x1a>
 80001b0:	2b03      	cmp	r3, #3
 80001b2:	d00d      	beq.n	80001d0 <increaseNewValue+0x34>
		case 4:
			greenNew++;
			if(greenNew > 99) greenNew = 1;
			break;
		default:
			break;
 80001b4:	e026      	b.n	8000204 <increaseNewValue+0x68>
			redNew++;
 80001b6:	4b1a      	ldr	r3, [pc, #104]	; (8000220 <increaseNewValue+0x84>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	3301      	adds	r3, #1
 80001bc:	4a18      	ldr	r2, [pc, #96]	; (8000220 <increaseNewValue+0x84>)
 80001be:	6013      	str	r3, [r2, #0]
			if(redNew > 99) redNew = 1;
 80001c0:	4b17      	ldr	r3, [pc, #92]	; (8000220 <increaseNewValue+0x84>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	2b63      	cmp	r3, #99	; 0x63
 80001c6:	dd1f      	ble.n	8000208 <increaseNewValue+0x6c>
 80001c8:	4b15      	ldr	r3, [pc, #84]	; (8000220 <increaseNewValue+0x84>)
 80001ca:	2201      	movs	r2, #1
 80001cc:	601a      	str	r2, [r3, #0]
			break;
 80001ce:	e01b      	b.n	8000208 <increaseNewValue+0x6c>
			amberNew++;
 80001d0:	4b14      	ldr	r3, [pc, #80]	; (8000224 <increaseNewValue+0x88>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	3301      	adds	r3, #1
 80001d6:	4a13      	ldr	r2, [pc, #76]	; (8000224 <increaseNewValue+0x88>)
 80001d8:	6013      	str	r3, [r2, #0]
			if(amberNew > 99) amberNew = 1;
 80001da:	4b12      	ldr	r3, [pc, #72]	; (8000224 <increaseNewValue+0x88>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b63      	cmp	r3, #99	; 0x63
 80001e0:	dd14      	ble.n	800020c <increaseNewValue+0x70>
 80001e2:	4b10      	ldr	r3, [pc, #64]	; (8000224 <increaseNewValue+0x88>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	601a      	str	r2, [r3, #0]
			break;
 80001e8:	e010      	b.n	800020c <increaseNewValue+0x70>
			greenNew++;
 80001ea:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <increaseNewValue+0x8c>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	3301      	adds	r3, #1
 80001f0:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <increaseNewValue+0x8c>)
 80001f2:	6013      	str	r3, [r2, #0]
			if(greenNew > 99) greenNew = 1;
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <increaseNewValue+0x8c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b63      	cmp	r3, #99	; 0x63
 80001fa:	dd09      	ble.n	8000210 <increaseNewValue+0x74>
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <increaseNewValue+0x8c>)
 80001fe:	2201      	movs	r2, #1
 8000200:	601a      	str	r2, [r3, #0]
			break;
 8000202:	e005      	b.n	8000210 <increaseNewValue+0x74>
			break;
 8000204:	bf00      	nop
 8000206:	e004      	b.n	8000212 <increaseNewValue+0x76>
			break;
 8000208:	bf00      	nop
 800020a:	e002      	b.n	8000212 <increaseNewValue+0x76>
			break;
 800020c:	bf00      	nop
 800020e:	e000      	b.n	8000212 <increaseNewValue+0x76>
			break;
 8000210:	bf00      	nop
	}
}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	20000000 	.word	0x20000000
 8000220:	20000020 	.word	0x20000020
 8000224:	20000028 	.word	0x20000028
 8000228:	20000024 	.word	0x20000024

0800022c <setNewDuration>:
static void setNewDuration(){
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
	int diff = 0;
 8000232:	2300      	movs	r3, #0
 8000234:	607b      	str	r3, [r7, #4]
	switch (mode) {
 8000236:	4b2b      	ldr	r3, [pc, #172]	; (80002e4 <setNewDuration+0xb8>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2b04      	cmp	r3, #4
 800023c:	d034      	beq.n	80002a8 <setNewDuration+0x7c>
 800023e:	2b04      	cmp	r3, #4
 8000240:	dc49      	bgt.n	80002d6 <setNewDuration+0xaa>
 8000242:	2b02      	cmp	r3, #2
 8000244:	d002      	beq.n	800024c <setNewDuration+0x20>
 8000246:	2b03      	cmp	r3, #3
 8000248:	d017      	beq.n	800027a <setNewDuration+0x4e>
			greenValue = greenNew;
			redValue += diff;
			redNew += diff;
			break;
		default:
			break;
 800024a:	e044      	b.n	80002d6 <setNewDuration+0xaa>
			diff = redNew - redValue;
 800024c:	4b26      	ldr	r3, [pc, #152]	; (80002e8 <setNewDuration+0xbc>)
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	4b26      	ldr	r3, [pc, #152]	; (80002ec <setNewDuration+0xc0>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	607b      	str	r3, [r7, #4]
			redValue = redNew;
 8000258:	4b23      	ldr	r3, [pc, #140]	; (80002e8 <setNewDuration+0xbc>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a23      	ldr	r2, [pc, #140]	; (80002ec <setNewDuration+0xc0>)
 800025e:	6013      	str	r3, [r2, #0]
			greenValue += diff;
 8000260:	4b23      	ldr	r3, [pc, #140]	; (80002f0 <setNewDuration+0xc4>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4413      	add	r3, r2
 8000268:	4a21      	ldr	r2, [pc, #132]	; (80002f0 <setNewDuration+0xc4>)
 800026a:	6013      	str	r3, [r2, #0]
			greenNew += diff;
 800026c:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <setNewDuration+0xc8>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4413      	add	r3, r2
 8000274:	4a1f      	ldr	r2, [pc, #124]	; (80002f4 <setNewDuration+0xc8>)
 8000276:	6013      	str	r3, [r2, #0]
			break;
 8000278:	e02e      	b.n	80002d8 <setNewDuration+0xac>
			diff = amberNew - amberValue;
 800027a:	4b1f      	ldr	r3, [pc, #124]	; (80002f8 <setNewDuration+0xcc>)
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b1f      	ldr	r3, [pc, #124]	; (80002fc <setNewDuration+0xd0>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	1ad3      	subs	r3, r2, r3
 8000284:	607b      	str	r3, [r7, #4]
			amberValue = amberNew;
 8000286:	4b1c      	ldr	r3, [pc, #112]	; (80002f8 <setNewDuration+0xcc>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a1c      	ldr	r2, [pc, #112]	; (80002fc <setNewDuration+0xd0>)
 800028c:	6013      	str	r3, [r2, #0]
			redValue += diff;
 800028e:	4b17      	ldr	r3, [pc, #92]	; (80002ec <setNewDuration+0xc0>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4413      	add	r3, r2
 8000296:	4a15      	ldr	r2, [pc, #84]	; (80002ec <setNewDuration+0xc0>)
 8000298:	6013      	str	r3, [r2, #0]
			redNew += diff;
 800029a:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <setNewDuration+0xbc>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4413      	add	r3, r2
 80002a2:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <setNewDuration+0xbc>)
 80002a4:	6013      	str	r3, [r2, #0]
			break;
 80002a6:	e017      	b.n	80002d8 <setNewDuration+0xac>
			diff = greenNew - greenValue;
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <setNewDuration+0xc8>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <setNewDuration+0xc4>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	1ad3      	subs	r3, r2, r3
 80002b2:	607b      	str	r3, [r7, #4]
			greenValue = greenNew;
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <setNewDuration+0xc8>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <setNewDuration+0xc4>)
 80002ba:	6013      	str	r3, [r2, #0]
			redValue += diff;
 80002bc:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <setNewDuration+0xc0>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4413      	add	r3, r2
 80002c4:	4a09      	ldr	r2, [pc, #36]	; (80002ec <setNewDuration+0xc0>)
 80002c6:	6013      	str	r3, [r2, #0]
			redNew += diff;
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <setNewDuration+0xbc>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4413      	add	r3, r2
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <setNewDuration+0xbc>)
 80002d2:	6013      	str	r3, [r2, #0]
			break;
 80002d4:	e000      	b.n	80002d8 <setNewDuration+0xac>
			break;
 80002d6:	bf00      	nop
	}
}
 80002d8:	bf00      	nop
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	20000000 	.word	0x20000000
 80002e8:	20000020 	.word	0x20000020
 80002ec:	20000014 	.word	0x20000014
 80002f0:	20000018 	.word	0x20000018
 80002f4:	20000024 	.word	0x20000024
 80002f8:	20000028 	.word	0x20000028
 80002fc:	2000001c 	.word	0x2000001c

08000300 <fsm_for_input_processing>:

void fsm_for_input_processing(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	switch (buttonState[0]) {
 8000304:	4b83      	ldr	r3, [pc, #524]	; (8000514 <fsm_for_input_processing+0x214>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b02      	cmp	r3, #2
 800030a:	d061      	beq.n	80003d0 <fsm_for_input_processing+0xd0>
 800030c:	2b02      	cmp	r3, #2
 800030e:	f300 8090 	bgt.w	8000432 <fsm_for_input_processing+0x132>
 8000312:	2b00      	cmp	r3, #0
 8000314:	d002      	beq.n	800031c <fsm_for_input_processing+0x1c>
 8000316:	2b01      	cmp	r3, #1
 8000318:	d029      	beq.n	800036e <fsm_for_input_processing+0x6e>
				}
				reset_flagForButtonHeld(0);
			}
			break;
		default:
			break;
 800031a:	e08a      	b.n	8000432 <fsm_for_input_processing+0x132>
			if(is_button_pressed(0)){
 800031c:	2000      	movs	r0, #0
 800031e:	f000 f9ef 	bl	8000700 <is_button_pressed>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	f000 8086 	beq.w	8000436 <fsm_for_input_processing+0x136>
				buttonState[0] = BUTTON_PRESSED;
 800032a:	4b7a      	ldr	r3, [pc, #488]	; (8000514 <fsm_for_input_processing+0x214>)
 800032c:	2201      	movs	r2, #1
 800032e:	701a      	strb	r2, [r3, #0]
				mode++;
 8000330:	4b79      	ldr	r3, [pc, #484]	; (8000518 <fsm_for_input_processing+0x218>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	3301      	adds	r3, #1
 8000336:	4a78      	ldr	r2, [pc, #480]	; (8000518 <fsm_for_input_processing+0x218>)
 8000338:	6013      	str	r3, [r2, #0]
				if(mode == 2 || mode == 3 || mode == 4){
 800033a:	4b77      	ldr	r3, [pc, #476]	; (8000518 <fsm_for_input_processing+0x218>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b02      	cmp	r3, #2
 8000340:	d007      	beq.n	8000352 <fsm_for_input_processing+0x52>
 8000342:	4b75      	ldr	r3, [pc, #468]	; (8000518 <fsm_for_input_processing+0x218>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b03      	cmp	r3, #3
 8000348:	d003      	beq.n	8000352 <fsm_for_input_processing+0x52>
 800034a:	4b73      	ldr	r3, [pc, #460]	; (8000518 <fsm_for_input_processing+0x218>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	2b04      	cmp	r3, #4
 8000350:	d103      	bne.n	800035a <fsm_for_input_processing+0x5a>
					initColor1();
 8000352:	f000 fa37 	bl	80007c4 <initColor1>
					initColor2();
 8000356:	f000 fa95 	bl	8000884 <initColor2>
				if(mode > 4) {
 800035a:	4b6f      	ldr	r3, [pc, #444]	; (8000518 <fsm_for_input_processing+0x218>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b04      	cmp	r3, #4
 8000360:	dd69      	ble.n	8000436 <fsm_for_input_processing+0x136>
					mode = 1;
 8000362:	4b6d      	ldr	r3, [pc, #436]	; (8000518 <fsm_for_input_processing+0x218>)
 8000364:	2201      	movs	r2, #1
 8000366:	601a      	str	r2, [r3, #0]
					resetCountValue();
 8000368:	f000 fd16 	bl	8000d98 <resetCountValue>
			break;
 800036c:	e063      	b.n	8000436 <fsm_for_input_processing+0x136>
			if(!is_button_pressed(0)){
 800036e:	2000      	movs	r0, #0
 8000370:	f000 f9c6 	bl	8000700 <is_button_pressed>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d102      	bne.n	8000380 <fsm_for_input_processing+0x80>
				buttonState[0] = BUTTON_RELEASED;
 800037a:	4b66      	ldr	r3, [pc, #408]	; (8000514 <fsm_for_input_processing+0x214>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
			if(is_button_pressed_1s(0)){
 8000380:	2000      	movs	r0, #0
 8000382:	f000 f9d7 	bl	8000734 <is_button_pressed_1s>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d056      	beq.n	800043a <fsm_for_input_processing+0x13a>
				buttonState[0] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800038c:	4b61      	ldr	r3, [pc, #388]	; (8000514 <fsm_for_input_processing+0x214>)
 800038e:	2202      	movs	r2, #2
 8000390:	701a      	strb	r2, [r3, #0]
				mode++;
 8000392:	4b61      	ldr	r3, [pc, #388]	; (8000518 <fsm_for_input_processing+0x218>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	3301      	adds	r3, #1
 8000398:	4a5f      	ldr	r2, [pc, #380]	; (8000518 <fsm_for_input_processing+0x218>)
 800039a:	6013      	str	r3, [r2, #0]
				if(mode == 2 || mode == 3 || mode == 4){
 800039c:	4b5e      	ldr	r3, [pc, #376]	; (8000518 <fsm_for_input_processing+0x218>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b02      	cmp	r3, #2
 80003a2:	d007      	beq.n	80003b4 <fsm_for_input_processing+0xb4>
 80003a4:	4b5c      	ldr	r3, [pc, #368]	; (8000518 <fsm_for_input_processing+0x218>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d003      	beq.n	80003b4 <fsm_for_input_processing+0xb4>
 80003ac:	4b5a      	ldr	r3, [pc, #360]	; (8000518 <fsm_for_input_processing+0x218>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d103      	bne.n	80003bc <fsm_for_input_processing+0xbc>
					initColor1();
 80003b4:	f000 fa06 	bl	80007c4 <initColor1>
					initColor2();
 80003b8:	f000 fa64 	bl	8000884 <initColor2>
				if(mode > 4) {
 80003bc:	4b56      	ldr	r3, [pc, #344]	; (8000518 <fsm_for_input_processing+0x218>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b04      	cmp	r3, #4
 80003c2:	dd3a      	ble.n	800043a <fsm_for_input_processing+0x13a>
					mode = 1;
 80003c4:	4b54      	ldr	r3, [pc, #336]	; (8000518 <fsm_for_input_processing+0x218>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
					resetCountValue();
 80003ca:	f000 fce5 	bl	8000d98 <resetCountValue>
			break;
 80003ce:	e034      	b.n	800043a <fsm_for_input_processing+0x13a>
			if(!is_button_pressed(0)){
 80003d0:	2000      	movs	r0, #0
 80003d2:	f000 f995 	bl	8000700 <is_button_pressed>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d102      	bne.n	80003e2 <fsm_for_input_processing+0xe2>
				buttonState[0] = BUTTON_RELEASED;
 80003dc:	4b4d      	ldr	r3, [pc, #308]	; (8000514 <fsm_for_input_processing+0x214>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
			if(is_button_held(0)){
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f9c0 	bl	8000768 <is_button_held>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d027      	beq.n	800043e <fsm_for_input_processing+0x13e>
				mode++;
 80003ee:	4b4a      	ldr	r3, [pc, #296]	; (8000518 <fsm_for_input_processing+0x218>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	3301      	adds	r3, #1
 80003f4:	4a48      	ldr	r2, [pc, #288]	; (8000518 <fsm_for_input_processing+0x218>)
 80003f6:	6013      	str	r3, [r2, #0]
				if(mode == 2 || mode == 3 || mode == 4){
 80003f8:	4b47      	ldr	r3, [pc, #284]	; (8000518 <fsm_for_input_processing+0x218>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b02      	cmp	r3, #2
 80003fe:	d007      	beq.n	8000410 <fsm_for_input_processing+0x110>
 8000400:	4b45      	ldr	r3, [pc, #276]	; (8000518 <fsm_for_input_processing+0x218>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b03      	cmp	r3, #3
 8000406:	d003      	beq.n	8000410 <fsm_for_input_processing+0x110>
 8000408:	4b43      	ldr	r3, [pc, #268]	; (8000518 <fsm_for_input_processing+0x218>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b04      	cmp	r3, #4
 800040e:	d103      	bne.n	8000418 <fsm_for_input_processing+0x118>
					initColor1();
 8000410:	f000 f9d8 	bl	80007c4 <initColor1>
					initColor2();
 8000414:	f000 fa36 	bl	8000884 <initColor2>
				if(mode > 4) {
 8000418:	4b3f      	ldr	r3, [pc, #252]	; (8000518 <fsm_for_input_processing+0x218>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b04      	cmp	r3, #4
 800041e:	dd04      	ble.n	800042a <fsm_for_input_processing+0x12a>
					mode = 1;
 8000420:	4b3d      	ldr	r3, [pc, #244]	; (8000518 <fsm_for_input_processing+0x218>)
 8000422:	2201      	movs	r2, #1
 8000424:	601a      	str	r2, [r3, #0]
					resetCountValue();
 8000426:	f000 fcb7 	bl	8000d98 <resetCountValue>
				reset_flagForButtonHeld(0);
 800042a:	2000      	movs	r0, #0
 800042c:	f000 f9b6 	bl	800079c <reset_flagForButtonHeld>
			break;
 8000430:	e005      	b.n	800043e <fsm_for_input_processing+0x13e>
			break;
 8000432:	bf00      	nop
 8000434:	e004      	b.n	8000440 <fsm_for_input_processing+0x140>
			break;
 8000436:	bf00      	nop
 8000438:	e002      	b.n	8000440 <fsm_for_input_processing+0x140>
			break;
 800043a:	bf00      	nop
 800043c:	e000      	b.n	8000440 <fsm_for_input_processing+0x140>
			break;
 800043e:	bf00      	nop
	}

	switch (buttonState[1]) {
 8000440:	4b34      	ldr	r3, [pc, #208]	; (8000514 <fsm_for_input_processing+0x214>)
 8000442:	785b      	ldrb	r3, [r3, #1]
 8000444:	2b02      	cmp	r3, #2
 8000446:	d027      	beq.n	8000498 <fsm_for_input_processing+0x198>
 8000448:	2b02      	cmp	r3, #2
 800044a:	dc3a      	bgt.n	80004c2 <fsm_for_input_processing+0x1c2>
 800044c:	2b00      	cmp	r3, #0
 800044e:	d002      	beq.n	8000456 <fsm_for_input_processing+0x156>
 8000450:	2b01      	cmp	r3, #1
 8000452:	d00c      	beq.n	800046e <fsm_for_input_processing+0x16e>
				increaseNewValue();
				reset_flagForButtonHeld(1);
			}
			break;
		default:
			break;
 8000454:	e035      	b.n	80004c2 <fsm_for_input_processing+0x1c2>
			if(is_button_pressed(1)){
 8000456:	2001      	movs	r0, #1
 8000458:	f000 f952 	bl	8000700 <is_button_pressed>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d031      	beq.n	80004c6 <fsm_for_input_processing+0x1c6>
				buttonState[1] = BUTTON_PRESSED;
 8000462:	4b2c      	ldr	r3, [pc, #176]	; (8000514 <fsm_for_input_processing+0x214>)
 8000464:	2201      	movs	r2, #1
 8000466:	705a      	strb	r2, [r3, #1]
				increaseNewValue();
 8000468:	f7ff fe98 	bl	800019c <increaseNewValue>
			break;
 800046c:	e02b      	b.n	80004c6 <fsm_for_input_processing+0x1c6>
			if(!is_button_pressed(1)){
 800046e:	2001      	movs	r0, #1
 8000470:	f000 f946 	bl	8000700 <is_button_pressed>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d102      	bne.n	8000480 <fsm_for_input_processing+0x180>
				buttonState[1] = BUTTON_RELEASED;
 800047a:	4b26      	ldr	r3, [pc, #152]	; (8000514 <fsm_for_input_processing+0x214>)
 800047c:	2200      	movs	r2, #0
 800047e:	705a      	strb	r2, [r3, #1]
			if(is_button_pressed_1s(1)){
 8000480:	2001      	movs	r0, #1
 8000482:	f000 f957 	bl	8000734 <is_button_pressed_1s>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d01e      	beq.n	80004ca <fsm_for_input_processing+0x1ca>
				buttonState[1] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800048c:	4b21      	ldr	r3, [pc, #132]	; (8000514 <fsm_for_input_processing+0x214>)
 800048e:	2202      	movs	r2, #2
 8000490:	705a      	strb	r2, [r3, #1]
				increaseNewValue();
 8000492:	f7ff fe83 	bl	800019c <increaseNewValue>
			break;
 8000496:	e018      	b.n	80004ca <fsm_for_input_processing+0x1ca>
			if(!is_button_pressed(1)){
 8000498:	2001      	movs	r0, #1
 800049a:	f000 f931 	bl	8000700 <is_button_pressed>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d102      	bne.n	80004aa <fsm_for_input_processing+0x1aa>
				buttonState[1] = BUTTON_RELEASED;
 80004a4:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <fsm_for_input_processing+0x214>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	705a      	strb	r2, [r3, #1]
			if(is_button_held(1)){
 80004aa:	2001      	movs	r0, #1
 80004ac:	f000 f95c 	bl	8000768 <is_button_held>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d00b      	beq.n	80004ce <fsm_for_input_processing+0x1ce>
				increaseNewValue();
 80004b6:	f7ff fe71 	bl	800019c <increaseNewValue>
				reset_flagForButtonHeld(1);
 80004ba:	2001      	movs	r0, #1
 80004bc:	f000 f96e 	bl	800079c <reset_flagForButtonHeld>
			break;
 80004c0:	e005      	b.n	80004ce <fsm_for_input_processing+0x1ce>
			break;
 80004c2:	bf00      	nop
 80004c4:	e004      	b.n	80004d0 <fsm_for_input_processing+0x1d0>
			break;
 80004c6:	bf00      	nop
 80004c8:	e002      	b.n	80004d0 <fsm_for_input_processing+0x1d0>
			break;
 80004ca:	bf00      	nop
 80004cc:	e000      	b.n	80004d0 <fsm_for_input_processing+0x1d0>
			break;
 80004ce:	bf00      	nop
	}

	switch (buttonState[2]) {
 80004d0:	4b10      	ldr	r3, [pc, #64]	; (8000514 <fsm_for_input_processing+0x214>)
 80004d2:	789b      	ldrb	r3, [r3, #2]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d002      	beq.n	80004de <fsm_for_input_processing+0x1de>
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d00c      	beq.n	80004f6 <fsm_for_input_processing+0x1f6>
			if(!is_button_pressed(2)){
				buttonState[2] = BUTTON_RELEASED;
			}
			break;
		default:
			break;
 80004dc:	e018      	b.n	8000510 <fsm_for_input_processing+0x210>
			if(is_button_pressed(2)){
 80004de:	2002      	movs	r0, #2
 80004e0:	f000 f90e 	bl	8000700 <is_button_pressed>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d00f      	beq.n	800050a <fsm_for_input_processing+0x20a>
				setNewDuration();
 80004ea:	f7ff fe9f 	bl	800022c <setNewDuration>
				buttonState[2] = BUTTON_PRESSED;
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <fsm_for_input_processing+0x214>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	709a      	strb	r2, [r3, #2]
			break;
 80004f4:	e009      	b.n	800050a <fsm_for_input_processing+0x20a>
			if(!is_button_pressed(2)){
 80004f6:	2002      	movs	r0, #2
 80004f8:	f000 f902 	bl	8000700 <is_button_pressed>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d105      	bne.n	800050e <fsm_for_input_processing+0x20e>
				buttonState[2] = BUTTON_RELEASED;
 8000502:	4b04      	ldr	r3, [pc, #16]	; (8000514 <fsm_for_input_processing+0x214>)
 8000504:	2200      	movs	r2, #0
 8000506:	709a      	strb	r2, [r3, #2]
			break;
 8000508:	e001      	b.n	800050e <fsm_for_input_processing+0x20e>
			break;
 800050a:	bf00      	nop
 800050c:	e000      	b.n	8000510 <fsm_for_input_processing+0x210>
			break;
 800050e:	bf00      	nop
	}
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000058 	.word	0x20000058
 8000518:	20000000 	.word	0x20000000

0800051c <initButton>:
static uint8_t flagForButtonHeld[NO_OF_BUTTONS];

static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];
static uint16_t counterForButtonHeld[NO_OF_BUTTONS];
static uint16_t BUTTON_Pin[3] = {BUTTON_1_Pin, BUTTON_2_Pin, BUTTON_3_Pin};
void initButton(){
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	e020      	b.n	800056a <initButton+0x4e>
		debounceButtonBuffer1[i] = BUTTON_IS_RELEASED;
 8000528:	4a14      	ldr	r2, [pc, #80]	; (800057c <initButton+0x60>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000532:	4a13      	ldr	r2, [pc, #76]	; (8000580 <initButton+0x64>)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4413      	add	r3, r2
 8000538:	2201      	movs	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer3[i] = BUTTON_IS_RELEASED;
 800053c:	4a11      	ldr	r2, [pc, #68]	; (8000584 <initButton+0x68>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4413      	add	r3, r2
 8000542:	2201      	movs	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]

		buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000546:	4a10      	ldr	r2, [pc, #64]	; (8000588 <initButton+0x6c>)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4413      	add	r3, r2
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
		flagForButtonPress1s[i] = 0;
 8000550:	4a0e      	ldr	r2, [pc, #56]	; (800058c <initButton+0x70>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
		counterForButtonPress1s[i] = 0;
 800055a:	4a0d      	ldr	r2, [pc, #52]	; (8000590 <initButton+0x74>)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2100      	movs	r1, #0
 8000560:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3301      	adds	r3, #1
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b02      	cmp	r3, #2
 800056e:	dddb      	ble.n	8000528 <initButton+0xc>
	}
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	20000060 	.word	0x20000060
 8000580:	20000064 	.word	0x20000064
 8000584:	20000068 	.word	0x20000068
 8000588:	2000005c 	.word	0x2000005c
 800058c:	2000006c 	.word	0x2000006c
 8000590:	20000074 	.word	0x20000074

08000594 <button_reading>:

void button_reading(void){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++){
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	e091      	b.n	80006c4 <button_reading+0x130>
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 80005a0:	4a4d      	ldr	r2, [pc, #308]	; (80006d8 <button_reading+0x144>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	7819      	ldrb	r1, [r3, #0]
 80005a8:	4a4c      	ldr	r2, [pc, #304]	; (80006dc <button_reading+0x148>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	460a      	mov	r2, r1
 80005b0:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer3[i];
 80005b2:	4a4b      	ldr	r2, [pc, #300]	; (80006e0 <button_reading+0x14c>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4413      	add	r3, r2
 80005b8:	7819      	ldrb	r1, [r3, #0]
 80005ba:	4a47      	ldr	r2, [pc, #284]	; (80006d8 <button_reading+0x144>)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4413      	add	r3, r2
 80005c0:	460a      	mov	r2, r1
 80005c2:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer3[i] = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin[i]);
 80005c4:	4a47      	ldr	r2, [pc, #284]	; (80006e4 <button_reading+0x150>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005cc:	4619      	mov	r1, r3
 80005ce:	4846      	ldr	r0, [pc, #280]	; (80006e8 <button_reading+0x154>)
 80005d0:	f001 fe2e 	bl	8002230 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4619      	mov	r1, r3
 80005d8:	4a41      	ldr	r2, [pc, #260]	; (80006e0 <button_reading+0x14c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	460a      	mov	r2, r1
 80005e0:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i] && debounceButtonBuffer2[i] == debounceButtonBuffer3[i]){
 80005e2:	4a3e      	ldr	r2, [pc, #248]	; (80006dc <button_reading+0x148>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4413      	add	r3, r2
 80005e8:	781a      	ldrb	r2, [r3, #0]
 80005ea:	493b      	ldr	r1, [pc, #236]	; (80006d8 <button_reading+0x144>)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	440b      	add	r3, r1
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d112      	bne.n	800061c <button_reading+0x88>
 80005f6:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <button_reading+0x144>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4413      	add	r3, r2
 80005fc:	781a      	ldrb	r2, [r3, #0]
 80005fe:	4938      	ldr	r1, [pc, #224]	; (80006e0 <button_reading+0x14c>)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	440b      	add	r3, r1
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	429a      	cmp	r2, r3
 8000608:	d108      	bne.n	800061c <button_reading+0x88>
			buttonBuffer[i] = debounceButtonBuffer3[i];
 800060a:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <button_reading+0x14c>)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4413      	add	r3, r2
 8000610:	7819      	ldrb	r1, [r3, #0]
 8000612:	4a36      	ldr	r2, [pc, #216]	; (80006ec <button_reading+0x158>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4413      	add	r3, r2
 8000618:	460a      	mov	r2, r1
 800061a:	701a      	strb	r2, [r3, #0]
		}
		if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 800061c:	4a33      	ldr	r2, [pc, #204]	; (80006ec <button_reading+0x158>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d136      	bne.n	8000696 <button_reading+0x102>
			if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8000628:	4a31      	ldr	r2, [pc, #196]	; (80006f0 <button_reading+0x15c>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000630:	2b63      	cmp	r3, #99	; 0x63
 8000632:	d80a      	bhi.n	800064a <button_reading+0xb6>
				counterForButtonPress1s[i]++;
 8000634:	4a2e      	ldr	r2, [pc, #184]	; (80006f0 <button_reading+0x15c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800063c:	3301      	adds	r3, #1
 800063e:	b299      	uxth	r1, r3
 8000640:	4a2b      	ldr	r2, [pc, #172]	; (80006f0 <button_reading+0x15c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000648:	e039      	b.n	80006be <button_reading+0x12a>
			}
			else{
				flagForButtonPress1s[i] = 1;
 800064a:	4a2a      	ldr	r2, [pc, #168]	; (80006f4 <button_reading+0x160>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4413      	add	r3, r2
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]

				if(counterForButtonHeld[i] < DURATION_FOR_HOLD){
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <button_reading+0x164>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800065c:	2b09      	cmp	r3, #9
 800065e:	d82e      	bhi.n	80006be <button_reading+0x12a>
					counterForButtonHeld[i]++;
 8000660:	4a25      	ldr	r2, [pc, #148]	; (80006f8 <button_reading+0x164>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000668:	3301      	adds	r3, #1
 800066a:	b299      	uxth	r1, r3
 800066c:	4a22      	ldr	r2, [pc, #136]	; (80006f8 <button_reading+0x164>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonHeld[i] >= DURATION_FOR_HOLD){
 8000674:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <button_reading+0x164>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800067c:	2b09      	cmp	r3, #9
 800067e:	d91e      	bls.n	80006be <button_reading+0x12a>
						flagForButtonHeld[i] = 1;
 8000680:	4a1e      	ldr	r2, [pc, #120]	; (80006fc <button_reading+0x168>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
						counterForButtonHeld[i] = 0;
 800068a:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <button_reading+0x164>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2100      	movs	r1, #0
 8000690:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000694:	e013      	b.n	80006be <button_reading+0x12a>
				}

			}
		}
		else{
			counterForButtonPress1s[i] = 0;
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <button_reading+0x15c>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2100      	movs	r1, #0
 800069c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			counterForButtonHeld[i] = 0;
 80006a0:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <button_reading+0x164>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2100      	movs	r1, #0
 80006a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <button_reading+0x160>)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
			flagForButtonHeld[i] = 0;
 80006b4:	4a11      	ldr	r2, [pc, #68]	; (80006fc <button_reading+0x168>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NO_OF_BUTTONS; i++){
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	3301      	adds	r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	f77f af6a 	ble.w	80005a0 <button_reading+0xc>
		}
	}
}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000064 	.word	0x20000064
 80006dc:	20000060 	.word	0x20000060
 80006e0:	20000068 	.word	0x20000068
 80006e4:	20000004 	.word	0x20000004
 80006e8:	40010c00 	.word	0x40010c00
 80006ec:	2000005c 	.word	0x2000005c
 80006f0:	20000074 	.word	0x20000074
 80006f4:	2000006c 	.word	0x2000006c
 80006f8:	2000007c 	.word	0x2000007c
 80006fc:	20000070 	.word	0x20000070

08000700 <is_button_pressed>:

unsigned char is_button_pressed(unsigned char index){
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b02      	cmp	r3, #2
 800070e:	d901      	bls.n	8000714 <is_button_pressed+0x14>
 8000710:	2300      	movs	r3, #0
 8000712:	e007      	b.n	8000724 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	4a06      	ldr	r2, [pc, #24]	; (8000730 <is_button_pressed+0x30>)
 8000718:	5cd3      	ldrb	r3, [r2, r3]
 800071a:	2b00      	cmp	r3, #0
 800071c:	bf0c      	ite	eq
 800071e:	2301      	moveq	r3, #1
 8000720:	2300      	movne	r3, #0
 8000722:	b2db      	uxtb	r3, r3
}
 8000724:	4618      	mov	r0, r3
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	2000005c 	.word	0x2000005c

08000734 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b02      	cmp	r3, #2
 8000742:	d901      	bls.n	8000748 <is_button_pressed_1s+0x14>
 8000744:	2300      	movs	r3, #0
 8000746:	e007      	b.n	8000758 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4a06      	ldr	r2, [pc, #24]	; (8000764 <is_button_pressed_1s+0x30>)
 800074c:	5cd3      	ldrb	r3, [r2, r3]
 800074e:	2b01      	cmp	r3, #1
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	2000006c 	.word	0x2000006c

08000768 <is_button_held>:

unsigned char is_button_held(unsigned char index){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b02      	cmp	r3, #2
 8000776:	d901      	bls.n	800077c <is_button_held+0x14>
 8000778:	2300      	movs	r3, #0
 800077a:	e007      	b.n	800078c <is_button_held+0x24>
	return flagForButtonHeld[index] == 1;
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	4a06      	ldr	r2, [pc, #24]	; (8000798 <is_button_held+0x30>)
 8000780:	5cd3      	ldrb	r3, [r2, r3]
 8000782:	2b01      	cmp	r3, #1
 8000784:	bf0c      	ite	eq
 8000786:	2301      	moveq	r3, #1
 8000788:	2300      	movne	r3, #0
 800078a:	b2db      	uxtb	r3, r3
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	20000070 	.word	0x20000070

0800079c <reset_flagForButtonHeld>:
void reset_flagForButtonHeld(unsigned char index){
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return;
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d804      	bhi.n	80007b6 <reset_flagForButtonHeld+0x1a>
	flagForButtonHeld[index] = 0;
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <reset_flagForButtonHeld+0x24>)
 80007b0:	2100      	movs	r1, #0
 80007b2:	54d1      	strb	r1, [r2, r3]
 80007b4:	e000      	b.n	80007b8 <reset_flagForButtonHeld+0x1c>
	if(index >= NO_OF_BUTTONS) return;
 80007b6:	bf00      	nop
}
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000070 	.word	0x20000070

080007c4 <initColor1>:
#include "led_display.h"


enum Color {RED, AMBER, GREEN};

void initColor1(void){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2180      	movs	r1, #128	; 0x80
 80007cc:	4808      	ldr	r0, [pc, #32]	; (80007f0 <initColor1+0x2c>)
 80007ce:	f001 fd46 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <initColor1+0x2c>)
 80007da:	f001 fd40 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <initColor1+0x2c>)
 80007e6:	f001 fd3a 	bl	800225e <HAL_GPIO_WritePin>
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40010800 	.word	0x40010800

080007f4 <setRed1>:
void setRed1(void){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	4808      	ldr	r0, [pc, #32]	; (8000820 <setRed1+0x2c>)
 80007fe:	f001 fd2e 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, SET);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <setRed1+0x2c>)
 800080a:	f001 fd28 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <setRed1+0x2c>)
 8000816:	f001 fd22 	bl	800225e <HAL_GPIO_WritePin>
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40010800 	.word	0x40010800

08000824 <setAmber1>:
void setAmber1(void){
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	4808      	ldr	r0, [pc, #32]	; (8000850 <setAmber1+0x2c>)
 800082e:	f001 fd16 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <setAmber1+0x2c>)
 800083a:	f001 fd10 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 800083e:	2201      	movs	r2, #1
 8000840:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <setAmber1+0x2c>)
 8000846:	f001 fd0a 	bl	800225e <HAL_GPIO_WritePin>
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40010800 	.word	0x40010800

08000854 <setGreen1>:
void setGreen1(void){
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2180      	movs	r1, #128	; 0x80
 800085c:	4808      	ldr	r0, [pc, #32]	; (8000880 <setGreen1+0x2c>)
 800085e:	f001 fcfe 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <setGreen1+0x2c>)
 800086a:	f001 fcf8 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <setGreen1+0x2c>)
 8000876:	f001 fcf2 	bl	800225e <HAL_GPIO_WritePin>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40010800 	.word	0x40010800

08000884 <initColor2>:


void initColor2(void){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088e:	4808      	ldr	r0, [pc, #32]	; (80008b0 <initColor2+0x2c>)
 8000890:	f001 fce5 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <initColor2+0x2c>)
 800089c:	f001 fcdf 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a6:	4802      	ldr	r0, [pc, #8]	; (80008b0 <initColor2+0x2c>)
 80008a8:	f001 fcd9 	bl	800225e <HAL_GPIO_WritePin>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40010800 	.word	0x40010800

080008b4 <setRed2>:
void setRed2(void){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008be:	4808      	ldr	r0, [pc, #32]	; (80008e0 <setRed2+0x2c>)
 80008c0:	f001 fccd 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <setRed2+0x2c>)
 80008cc:	f001 fcc7 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d6:	4802      	ldr	r0, [pc, #8]	; (80008e0 <setRed2+0x2c>)
 80008d8:	f001 fcc1 	bl	800225e <HAL_GPIO_WritePin>
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40010800 	.word	0x40010800

080008e4 <setAmber2>:
void setAmber2(void){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ee:	4808      	ldr	r0, [pc, #32]	; (8000910 <setAmber2+0x2c>)
 80008f0:	f001 fcb5 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <setAmber2+0x2c>)
 80008fc:	f001 fcaf 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000900:	2201      	movs	r2, #1
 8000902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000906:	4802      	ldr	r0, [pc, #8]	; (8000910 <setAmber2+0x2c>)
 8000908:	f001 fca9 	bl	800225e <HAL_GPIO_WritePin>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40010800 	.word	0x40010800

08000914 <setGreen2>:
void setGreen2(void){
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800091e:	4808      	ldr	r0, [pc, #32]	; (8000940 <setGreen2+0x2c>)
 8000920:	f001 fc9d 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, SET);
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <setGreen2+0x2c>)
 800092c:	f001 fc97 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000936:	4802      	ldr	r0, [pc, #8]	; (8000940 <setGreen2+0x2c>)
 8000938:	f001 fc91 	bl	800225e <HAL_GPIO_WritePin>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40010800 	.word	0x40010800

08000944 <display7SEG>:

void display7SEG(int index){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b09      	cmp	r3, #9
 8000950:	f200 8180 	bhi.w	8000c54 <display7SEG+0x310>
 8000954:	a201      	add	r2, pc, #4	; (adr r2, 800095c <display7SEG+0x18>)
 8000956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095a:	bf00      	nop
 800095c:	08000985 	.word	0x08000985
 8000960:	080009cd 	.word	0x080009cd
 8000964:	08000a15 	.word	0x08000a15
 8000968:	08000a5d 	.word	0x08000a5d
 800096c:	08000aa5 	.word	0x08000aa5
 8000970:	08000aed 	.word	0x08000aed
 8000974:	08000b35 	.word	0x08000b35
 8000978:	08000b7d 	.word	0x08000b7d
 800097c:	08000bc5 	.word	0x08000bc5
 8000980:	08000c0d 	.word	0x08000c0d
	switch (index) {
		case 0:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2101      	movs	r1, #1
 8000988:	48c6      	ldr	r0, [pc, #792]	; (8000ca4 <display7SEG+0x360>)
 800098a:	f001 fc68 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2102      	movs	r1, #2
 8000992:	48c4      	ldr	r0, [pc, #784]	; (8000ca4 <display7SEG+0x360>)
 8000994:	f001 fc63 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2104      	movs	r1, #4
 800099c:	48c1      	ldr	r0, [pc, #772]	; (8000ca4 <display7SEG+0x360>)
 800099e:	f001 fc5e 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2108      	movs	r1, #8
 80009a6:	48bf      	ldr	r0, [pc, #764]	; (8000ca4 <display7SEG+0x360>)
 80009a8:	f001 fc59 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2110      	movs	r1, #16
 80009b0:	48bc      	ldr	r0, [pc, #752]	; (8000ca4 <display7SEG+0x360>)
 80009b2:	f001 fc54 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2120      	movs	r1, #32
 80009ba:	48ba      	ldr	r0, [pc, #744]	; (8000ca4 <display7SEG+0x360>)
 80009bc:	f001 fc4f 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2140      	movs	r1, #64	; 0x40
 80009c4:	48b7      	ldr	r0, [pc, #732]	; (8000ca4 <display7SEG+0x360>)
 80009c6:	f001 fc4a 	bl	800225e <HAL_GPIO_WritePin>
			break;
 80009ca:	e167      	b.n	8000c9c <display7SEG+0x358>
		case 1:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2101      	movs	r1, #1
 80009d0:	48b4      	ldr	r0, [pc, #720]	; (8000ca4 <display7SEG+0x360>)
 80009d2:	f001 fc44 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2102      	movs	r1, #2
 80009da:	48b2      	ldr	r0, [pc, #712]	; (8000ca4 <display7SEG+0x360>)
 80009dc:	f001 fc3f 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2104      	movs	r1, #4
 80009e4:	48af      	ldr	r0, [pc, #700]	; (8000ca4 <display7SEG+0x360>)
 80009e6:	f001 fc3a 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2108      	movs	r1, #8
 80009ee:	48ad      	ldr	r0, [pc, #692]	; (8000ca4 <display7SEG+0x360>)
 80009f0:	f001 fc35 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2110      	movs	r1, #16
 80009f8:	48aa      	ldr	r0, [pc, #680]	; (8000ca4 <display7SEG+0x360>)
 80009fa:	f001 fc30 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	2120      	movs	r1, #32
 8000a02:	48a8      	ldr	r0, [pc, #672]	; (8000ca4 <display7SEG+0x360>)
 8000a04:	f001 fc2b 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2140      	movs	r1, #64	; 0x40
 8000a0c:	48a5      	ldr	r0, [pc, #660]	; (8000ca4 <display7SEG+0x360>)
 8000a0e:	f001 fc26 	bl	800225e <HAL_GPIO_WritePin>
			break;
 8000a12:	e143      	b.n	8000c9c <display7SEG+0x358>
		case 2:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2101      	movs	r1, #1
 8000a18:	48a2      	ldr	r0, [pc, #648]	; (8000ca4 <display7SEG+0x360>)
 8000a1a:	f001 fc20 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2102      	movs	r1, #2
 8000a22:	48a0      	ldr	r0, [pc, #640]	; (8000ca4 <display7SEG+0x360>)
 8000a24:	f001 fc1b 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	489d      	ldr	r0, [pc, #628]	; (8000ca4 <display7SEG+0x360>)
 8000a2e:	f001 fc16 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2108      	movs	r1, #8
 8000a36:	489b      	ldr	r0, [pc, #620]	; (8000ca4 <display7SEG+0x360>)
 8000a38:	f001 fc11 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2110      	movs	r1, #16
 8000a40:	4898      	ldr	r0, [pc, #608]	; (8000ca4 <display7SEG+0x360>)
 8000a42:	f001 fc0c 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2120      	movs	r1, #32
 8000a4a:	4896      	ldr	r0, [pc, #600]	; (8000ca4 <display7SEG+0x360>)
 8000a4c:	f001 fc07 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2140      	movs	r1, #64	; 0x40
 8000a54:	4893      	ldr	r0, [pc, #588]	; (8000ca4 <display7SEG+0x360>)
 8000a56:	f001 fc02 	bl	800225e <HAL_GPIO_WritePin>
			break;
 8000a5a:	e11f      	b.n	8000c9c <display7SEG+0x358>
		case 3:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2101      	movs	r1, #1
 8000a60:	4890      	ldr	r0, [pc, #576]	; (8000ca4 <display7SEG+0x360>)
 8000a62:	f001 fbfc 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2102      	movs	r1, #2
 8000a6a:	488e      	ldr	r0, [pc, #568]	; (8000ca4 <display7SEG+0x360>)
 8000a6c:	f001 fbf7 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2104      	movs	r1, #4
 8000a74:	488b      	ldr	r0, [pc, #556]	; (8000ca4 <display7SEG+0x360>)
 8000a76:	f001 fbf2 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2108      	movs	r1, #8
 8000a7e:	4889      	ldr	r0, [pc, #548]	; (8000ca4 <display7SEG+0x360>)
 8000a80:	f001 fbed 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2110      	movs	r1, #16
 8000a88:	4886      	ldr	r0, [pc, #536]	; (8000ca4 <display7SEG+0x360>)
 8000a8a:	f001 fbe8 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2120      	movs	r1, #32
 8000a92:	4884      	ldr	r0, [pc, #528]	; (8000ca4 <display7SEG+0x360>)
 8000a94:	f001 fbe3 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2140      	movs	r1, #64	; 0x40
 8000a9c:	4881      	ldr	r0, [pc, #516]	; (8000ca4 <display7SEG+0x360>)
 8000a9e:	f001 fbde 	bl	800225e <HAL_GPIO_WritePin>
			break;
 8000aa2:	e0fb      	b.n	8000c9c <display7SEG+0x358>
		case 4:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	487e      	ldr	r0, [pc, #504]	; (8000ca4 <display7SEG+0x360>)
 8000aaa:	f001 fbd8 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	487c      	ldr	r0, [pc, #496]	; (8000ca4 <display7SEG+0x360>)
 8000ab4:	f001 fbd3 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2104      	movs	r1, #4
 8000abc:	4879      	ldr	r0, [pc, #484]	; (8000ca4 <display7SEG+0x360>)
 8000abe:	f001 fbce 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	4877      	ldr	r0, [pc, #476]	; (8000ca4 <display7SEG+0x360>)
 8000ac8:	f001 fbc9 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2110      	movs	r1, #16
 8000ad0:	4874      	ldr	r0, [pc, #464]	; (8000ca4 <display7SEG+0x360>)
 8000ad2:	f001 fbc4 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2120      	movs	r1, #32
 8000ada:	4872      	ldr	r0, [pc, #456]	; (8000ca4 <display7SEG+0x360>)
 8000adc:	f001 fbbf 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2140      	movs	r1, #64	; 0x40
 8000ae4:	486f      	ldr	r0, [pc, #444]	; (8000ca4 <display7SEG+0x360>)
 8000ae6:	f001 fbba 	bl	800225e <HAL_GPIO_WritePin>
			break;
 8000aea:	e0d7      	b.n	8000c9c <display7SEG+0x358>
		case 5:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2101      	movs	r1, #1
 8000af0:	486c      	ldr	r0, [pc, #432]	; (8000ca4 <display7SEG+0x360>)
 8000af2:	f001 fbb4 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2102      	movs	r1, #2
 8000afa:	486a      	ldr	r0, [pc, #424]	; (8000ca4 <display7SEG+0x360>)
 8000afc:	f001 fbaf 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2104      	movs	r1, #4
 8000b04:	4867      	ldr	r0, [pc, #412]	; (8000ca4 <display7SEG+0x360>)
 8000b06:	f001 fbaa 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	4865      	ldr	r0, [pc, #404]	; (8000ca4 <display7SEG+0x360>)
 8000b10:	f001 fba5 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2110      	movs	r1, #16
 8000b18:	4862      	ldr	r0, [pc, #392]	; (8000ca4 <display7SEG+0x360>)
 8000b1a:	f001 fba0 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2120      	movs	r1, #32
 8000b22:	4860      	ldr	r0, [pc, #384]	; (8000ca4 <display7SEG+0x360>)
 8000b24:	f001 fb9b 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2140      	movs	r1, #64	; 0x40
 8000b2c:	485d      	ldr	r0, [pc, #372]	; (8000ca4 <display7SEG+0x360>)
 8000b2e:	f001 fb96 	bl	800225e <HAL_GPIO_WritePin>
			break;
 8000b32:	e0b3      	b.n	8000c9c <display7SEG+0x358>
		case 6:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2101      	movs	r1, #1
 8000b38:	485a      	ldr	r0, [pc, #360]	; (8000ca4 <display7SEG+0x360>)
 8000b3a:	f001 fb90 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2102      	movs	r1, #2
 8000b42:	4858      	ldr	r0, [pc, #352]	; (8000ca4 <display7SEG+0x360>)
 8000b44:	f001 fb8b 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	4855      	ldr	r0, [pc, #340]	; (8000ca4 <display7SEG+0x360>)
 8000b4e:	f001 fb86 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2108      	movs	r1, #8
 8000b56:	4853      	ldr	r0, [pc, #332]	; (8000ca4 <display7SEG+0x360>)
 8000b58:	f001 fb81 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2110      	movs	r1, #16
 8000b60:	4850      	ldr	r0, [pc, #320]	; (8000ca4 <display7SEG+0x360>)
 8000b62:	f001 fb7c 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2120      	movs	r1, #32
 8000b6a:	484e      	ldr	r0, [pc, #312]	; (8000ca4 <display7SEG+0x360>)
 8000b6c:	f001 fb77 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2140      	movs	r1, #64	; 0x40
 8000b74:	484b      	ldr	r0, [pc, #300]	; (8000ca4 <display7SEG+0x360>)
 8000b76:	f001 fb72 	bl	800225e <HAL_GPIO_WritePin>
			break;
 8000b7a:	e08f      	b.n	8000c9c <display7SEG+0x358>
		case 7:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2101      	movs	r1, #1
 8000b80:	4848      	ldr	r0, [pc, #288]	; (8000ca4 <display7SEG+0x360>)
 8000b82:	f001 fb6c 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2102      	movs	r1, #2
 8000b8a:	4846      	ldr	r0, [pc, #280]	; (8000ca4 <display7SEG+0x360>)
 8000b8c:	f001 fb67 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2104      	movs	r1, #4
 8000b94:	4843      	ldr	r0, [pc, #268]	; (8000ca4 <display7SEG+0x360>)
 8000b96:	f001 fb62 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	4841      	ldr	r0, [pc, #260]	; (8000ca4 <display7SEG+0x360>)
 8000ba0:	f001 fb5d 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	483e      	ldr	r0, [pc, #248]	; (8000ca4 <display7SEG+0x360>)
 8000baa:	f001 fb58 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	483c      	ldr	r0, [pc, #240]	; (8000ca4 <display7SEG+0x360>)
 8000bb4:	f001 fb53 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2140      	movs	r1, #64	; 0x40
 8000bbc:	4839      	ldr	r0, [pc, #228]	; (8000ca4 <display7SEG+0x360>)
 8000bbe:	f001 fb4e 	bl	800225e <HAL_GPIO_WritePin>
			break;
 8000bc2:	e06b      	b.n	8000c9c <display7SEG+0x358>
		case 8:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4836      	ldr	r0, [pc, #216]	; (8000ca4 <display7SEG+0x360>)
 8000bca:	f001 fb48 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4834      	ldr	r0, [pc, #208]	; (8000ca4 <display7SEG+0x360>)
 8000bd4:	f001 fb43 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2104      	movs	r1, #4
 8000bdc:	4831      	ldr	r0, [pc, #196]	; (8000ca4 <display7SEG+0x360>)
 8000bde:	f001 fb3e 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2108      	movs	r1, #8
 8000be6:	482f      	ldr	r0, [pc, #188]	; (8000ca4 <display7SEG+0x360>)
 8000be8:	f001 fb39 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2110      	movs	r1, #16
 8000bf0:	482c      	ldr	r0, [pc, #176]	; (8000ca4 <display7SEG+0x360>)
 8000bf2:	f001 fb34 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	482a      	ldr	r0, [pc, #168]	; (8000ca4 <display7SEG+0x360>)
 8000bfc:	f001 fb2f 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2140      	movs	r1, #64	; 0x40
 8000c04:	4827      	ldr	r0, [pc, #156]	; (8000ca4 <display7SEG+0x360>)
 8000c06:	f001 fb2a 	bl	800225e <HAL_GPIO_WritePin>
			break;
 8000c0a:	e047      	b.n	8000c9c <display7SEG+0x358>
		case 9:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2101      	movs	r1, #1
 8000c10:	4824      	ldr	r0, [pc, #144]	; (8000ca4 <display7SEG+0x360>)
 8000c12:	f001 fb24 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4822      	ldr	r0, [pc, #136]	; (8000ca4 <display7SEG+0x360>)
 8000c1c:	f001 fb1f 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2104      	movs	r1, #4
 8000c24:	481f      	ldr	r0, [pc, #124]	; (8000ca4 <display7SEG+0x360>)
 8000c26:	f001 fb1a 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	481d      	ldr	r0, [pc, #116]	; (8000ca4 <display7SEG+0x360>)
 8000c30:	f001 fb15 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2110      	movs	r1, #16
 8000c38:	481a      	ldr	r0, [pc, #104]	; (8000ca4 <display7SEG+0x360>)
 8000c3a:	f001 fb10 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2120      	movs	r1, #32
 8000c42:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <display7SEG+0x360>)
 8000c44:	f001 fb0b 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2140      	movs	r1, #64	; 0x40
 8000c4c:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <display7SEG+0x360>)
 8000c4e:	f001 fb06 	bl	800225e <HAL_GPIO_WritePin>
			break;
 8000c52:	e023      	b.n	8000c9c <display7SEG+0x358>
		default:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2101      	movs	r1, #1
 8000c58:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <display7SEG+0x360>)
 8000c5a:	f001 fb00 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2102      	movs	r1, #2
 8000c62:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <display7SEG+0x360>)
 8000c64:	f001 fafb 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <display7SEG+0x360>)
 8000c6e:	f001 faf6 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2108      	movs	r1, #8
 8000c76:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <display7SEG+0x360>)
 8000c78:	f001 faf1 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <display7SEG+0x360>)
 8000c82:	f001 faec 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2120      	movs	r1, #32
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <display7SEG+0x360>)
 8000c8c:	f001 fae7 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2140      	movs	r1, #64	; 0x40
 8000c94:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <display7SEG+0x360>)
 8000c96:	f001 fae2 	bl	800225e <HAL_GPIO_WritePin>
			break;
 8000c9a:	bf00      	nop
	}
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010800 	.word	0x40010800

08000ca8 <toggleRed>:
	HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
	HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
	HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
}

void toggleRed(){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <toggleRed+0x4c>)
 8000cb0:	f001 faed 	bl	800228e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 8000cb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb8:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <toggleRed+0x4c>)
 8000cba:	f001 fae8 	bl	800228e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc4:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <toggleRed+0x4c>)
 8000cc6:	f001 faca 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd0:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <toggleRed+0x4c>)
 8000cd2:	f001 fac4 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <toggleRed+0x4c>)
 8000cde:	f001 fabe 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <toggleRed+0x4c>)
 8000cea:	f001 fab8 	bl	800225e <HAL_GPIO_WritePin>
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40010800 	.word	0x40010800

08000cf8 <toggleAmber>:
void toggleAmber(){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin);
 8000cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d00:	4810      	ldr	r0, [pc, #64]	; (8000d44 <toggleAmber+0x4c>)
 8000d02:	f001 fac4 	bl	800228e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin);
 8000d06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d0a:	480e      	ldr	r0, [pc, #56]	; (8000d44 <toggleAmber+0x4c>)
 8000d0c:	f001 fabf 	bl	800228e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	480b      	ldr	r0, [pc, #44]	; (8000d44 <toggleAmber+0x4c>)
 8000d16:	f001 faa2 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d20:	4808      	ldr	r0, [pc, #32]	; (8000d44 <toggleAmber+0x4c>)
 8000d22:	f001 fa9c 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <toggleAmber+0x4c>)
 8000d2e:	f001 fa96 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <toggleAmber+0x4c>)
 8000d3a:	f001 fa90 	bl	800225e <HAL_GPIO_WritePin>
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40010800 	.word	0x40010800

08000d48 <toggleGreen>:
void toggleGreen(){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 8000d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d50:	4810      	ldr	r0, [pc, #64]	; (8000d94 <toggleGreen+0x4c>)
 8000d52:	f001 fa9c 	bl	800228e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 8000d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5a:	480e      	ldr	r0, [pc, #56]	; (8000d94 <toggleGreen+0x4c>)
 8000d5c:	f001 fa97 	bl	800228e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	480b      	ldr	r0, [pc, #44]	; (8000d94 <toggleGreen+0x4c>)
 8000d66:	f001 fa7a 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d70:	4808      	ldr	r0, [pc, #32]	; (8000d94 <toggleGreen+0x4c>)
 8000d72:	f001 fa74 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <toggleGreen+0x4c>)
 8000d7e:	f001 fa6e 	bl	800225e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <toggleGreen+0x4c>)
 8000d8a:	f001 fa68 	bl	800225e <HAL_GPIO_WritePin>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40010800 	.word	0x40010800

08000d98 <resetCountValue>:
enum Color state1 = RED;
enum Color state2 = GREEN;



void resetCountValue(){
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
	cnt1 = redValue;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <resetCountValue+0x28>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <resetCountValue+0x2c>)
 8000da2:	6013      	str	r3, [r2, #0]
	cnt2 = greenValue;
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <resetCountValue+0x30>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <resetCountValue+0x34>)
 8000daa:	6013      	str	r3, [r2, #0]
	state1 = RED;
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <resetCountValue+0x38>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
	state2 = GREEN;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <resetCountValue+0x3c>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	701a      	strb	r2, [r3, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	20000014 	.word	0x20000014
 8000dc4:	2000000c 	.word	0x2000000c
 8000dc8:	20000018 	.word	0x20000018
 8000dcc:	20000010 	.word	0x20000010
 8000dd0:	20000082 	.word	0x20000082
 8000dd4:	2000002c 	.word	0x2000002c

08000dd8 <normalMode>:

void normalMode(){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	cnt1--;
 8000ddc:	4b41      	ldr	r3, [pc, #260]	; (8000ee4 <normalMode+0x10c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	4a40      	ldr	r2, [pc, #256]	; (8000ee4 <normalMode+0x10c>)
 8000de4:	6013      	str	r3, [r2, #0]
	cnt2--;
 8000de6:	4b40      	ldr	r3, [pc, #256]	; (8000ee8 <normalMode+0x110>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	4a3e      	ldr	r2, [pc, #248]	; (8000ee8 <normalMode+0x110>)
 8000dee:	6013      	str	r3, [r2, #0]
	switch (state1) {
 8000df0:	4b3e      	ldr	r3, [pc, #248]	; (8000eec <normalMode+0x114>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d022      	beq.n	8000e3e <normalMode+0x66>
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	dc2e      	bgt.n	8000e5a <normalMode+0x82>
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <normalMode+0x2e>
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d00e      	beq.n	8000e22 <normalMode+0x4a>
				//cnt1 = 5;
				state1 = AMBER;
			}
			break;
		default:
			break;
 8000e04:	e029      	b.n	8000e5a <normalMode+0x82>
			setRed1();
 8000e06:	f7ff fcf5 	bl	80007f4 <setRed1>
			if(cnt1 <= 0){
 8000e0a:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <normalMode+0x10c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	dc25      	bgt.n	8000e5e <normalMode+0x86>
				cnt1 = greenValue;
 8000e12:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <normalMode+0x118>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a33      	ldr	r2, [pc, #204]	; (8000ee4 <normalMode+0x10c>)
 8000e18:	6013      	str	r3, [r2, #0]
				state1 = GREEN;
 8000e1a:	4b34      	ldr	r3, [pc, #208]	; (8000eec <normalMode+0x114>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	701a      	strb	r2, [r3, #0]
			break;
 8000e20:	e01d      	b.n	8000e5e <normalMode+0x86>
			setAmber1();
 8000e22:	f7ff fcff 	bl	8000824 <setAmber1>
			if(cnt1 <= 0){
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <normalMode+0x10c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	dc19      	bgt.n	8000e62 <normalMode+0x8a>
				cnt1 = redValue;
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <normalMode+0x11c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a2c      	ldr	r2, [pc, #176]	; (8000ee4 <normalMode+0x10c>)
 8000e34:	6013      	str	r3, [r2, #0]
				state1 = RED;
 8000e36:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <normalMode+0x114>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
			break;
 8000e3c:	e011      	b.n	8000e62 <normalMode+0x8a>
			setGreen1();
 8000e3e:	f7ff fd09 	bl	8000854 <setGreen1>
			if(cnt1 <= 0){
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <normalMode+0x10c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	dc0d      	bgt.n	8000e66 <normalMode+0x8e>
				cnt1 = amberValue;
 8000e4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <normalMode+0x120>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <normalMode+0x10c>)
 8000e50:	6013      	str	r3, [r2, #0]
				state1 = AMBER;
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <normalMode+0x114>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
			break;
 8000e58:	e005      	b.n	8000e66 <normalMode+0x8e>
			break;
 8000e5a:	bf00      	nop
 8000e5c:	e004      	b.n	8000e68 <normalMode+0x90>
			break;
 8000e5e:	bf00      	nop
 8000e60:	e002      	b.n	8000e68 <normalMode+0x90>
			break;
 8000e62:	bf00      	nop
 8000e64:	e000      	b.n	8000e68 <normalMode+0x90>
			break;
 8000e66:	bf00      	nop
	}
	switch (state2) {
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <normalMode+0x124>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d022      	beq.n	8000eb6 <normalMode+0xde>
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	dc2e      	bgt.n	8000ed2 <normalMode+0xfa>
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d002      	beq.n	8000e7e <normalMode+0xa6>
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d00e      	beq.n	8000e9a <normalMode+0xc2>
				//cnt2 = 5;
				state2 = AMBER;
			}
			break;
		default:
			break;
 8000e7c:	e029      	b.n	8000ed2 <normalMode+0xfa>
			setRed2();
 8000e7e:	f7ff fd19 	bl	80008b4 <setRed2>
			if(cnt2 <= 0){
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <normalMode+0x110>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	dc25      	bgt.n	8000ed6 <normalMode+0xfe>
				cnt2 = greenValue;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <normalMode+0x118>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <normalMode+0x110>)
 8000e90:	6013      	str	r3, [r2, #0]
				state2 = GREEN;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <normalMode+0x124>)
 8000e94:	2202      	movs	r2, #2
 8000e96:	701a      	strb	r2, [r3, #0]
			break;
 8000e98:	e01d      	b.n	8000ed6 <normalMode+0xfe>
			setAmber2();
 8000e9a:	f7ff fd23 	bl	80008e4 <setAmber2>
			if(cnt2 <= 0){
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <normalMode+0x110>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	dc19      	bgt.n	8000eda <normalMode+0x102>
				cnt2 = redValue;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <normalMode+0x11c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <normalMode+0x110>)
 8000eac:	6013      	str	r3, [r2, #0]
				state2 = RED;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <normalMode+0x124>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
			break;
 8000eb4:	e011      	b.n	8000eda <normalMode+0x102>
			setGreen2();
 8000eb6:	f7ff fd2d 	bl	8000914 <setGreen2>
			if(cnt2 <= 0){
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <normalMode+0x110>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	dc0d      	bgt.n	8000ede <normalMode+0x106>
				cnt2 = amberValue;
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <normalMode+0x120>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <normalMode+0x110>)
 8000ec8:	6013      	str	r3, [r2, #0]
				state2 = AMBER;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <normalMode+0x124>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
			break;
 8000ed0:	e005      	b.n	8000ede <normalMode+0x106>
			break;
 8000ed2:	bf00      	nop
 8000ed4:	e004      	b.n	8000ee0 <normalMode+0x108>
			break;
 8000ed6:	bf00      	nop
 8000ed8:	e002      	b.n	8000ee0 <normalMode+0x108>
			break;
 8000eda:	bf00      	nop
 8000edc:	e000      	b.n	8000ee0 <normalMode+0x108>
			break;
 8000ede:	bf00      	nop
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000000c 	.word	0x2000000c
 8000ee8:	20000010 	.word	0x20000010
 8000eec:	20000082 	.word	0x20000082
 8000ef0:	20000018 	.word	0x20000018
 8000ef4:	20000014 	.word	0x20000014
 8000ef8:	2000001c 	.word	0x2000001c
 8000efc:	2000002c 	.word	0x2000002c

08000f00 <get7SEG1Value>:

int get7SEG1Value(){
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	switch (mode) {
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <get7SEG1Value+0x48>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d816      	bhi.n	8000f3c <get7SEG1Value+0x3c>
 8000f0e:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <get7SEG1Value+0x14>)
 8000f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f14:	08000f25 	.word	0x08000f25
 8000f18:	08000f2b 	.word	0x08000f2b
 8000f1c:	08000f31 	.word	0x08000f31
 8000f20:	08000f37 	.word	0x08000f37
		case 1:
			return cnt1;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <get7SEG1Value+0x4c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	e00a      	b.n	8000f40 <get7SEG1Value+0x40>
			break;
		case 2:
			return redNew;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <get7SEG1Value+0x50>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	e007      	b.n	8000f40 <get7SEG1Value+0x40>
			break;
		case 3:
			return amberNew;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <get7SEG1Value+0x54>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	e004      	b.n	8000f40 <get7SEG1Value+0x40>
			break;
		case 4:
			return greenNew;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <get7SEG1Value+0x58>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	e001      	b.n	8000f40 <get7SEG1Value+0x40>
			break;
		default:
			break;
 8000f3c:	bf00      	nop
	}
	return 0;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	2000000c 	.word	0x2000000c
 8000f50:	20000020 	.word	0x20000020
 8000f54:	20000028 	.word	0x20000028
 8000f58:	20000024 	.word	0x20000024

08000f5c <get7SEG2Value>:
int get7SEG2Value(){
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	switch (mode) {
 8000f60:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <get7SEG2Value+0x48>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d816      	bhi.n	8000f98 <get7SEG2Value+0x3c>
 8000f6a:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <get7SEG2Value+0x14>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000f81 	.word	0x08000f81
 8000f74:	08000f87 	.word	0x08000f87
 8000f78:	08000f8d 	.word	0x08000f8d
 8000f7c:	08000f93 	.word	0x08000f93
		case 1:
			return cnt2;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <get7SEG2Value+0x4c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	e00a      	b.n	8000f9c <get7SEG2Value+0x40>
			break;
		case 2:
			return redNew;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <get7SEG2Value+0x50>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	e007      	b.n	8000f9c <get7SEG2Value+0x40>
			break;
		case 3:
			return amberNew;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <get7SEG2Value+0x54>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	e004      	b.n	8000f9c <get7SEG2Value+0x40>
			break;
		case 4:
			return greenNew;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <get7SEG2Value+0x58>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	e001      	b.n	8000f9c <get7SEG2Value+0x40>
			break;
		default:
			break;
 8000f98:	bf00      	nop
	}
	return 0;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000010 	.word	0x20000010
 8000fac:	20000020 	.word	0x20000020
 8000fb0:	20000028 	.word	0x20000028
 8000fb4:	20000024 	.word	0x20000024

08000fb8 <ledDispMode>:

void ledDispMode(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	switch (mode) {
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <ledDispMode+0x3c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d813      	bhi.n	8000fee <ledDispMode+0x36>
 8000fc6:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <ledDispMode+0x14>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08000fef 	.word	0x08000fef
 8000fd0:	08000fdd 	.word	0x08000fdd
 8000fd4:	08000fe3 	.word	0x08000fe3
 8000fd8:	08000fe9 	.word	0x08000fe9
		case 1:
			;
			break;
		case 2:
			toggleRed();
 8000fdc:	f7ff fe64 	bl	8000ca8 <toggleRed>
			break;
 8000fe0:	e006      	b.n	8000ff0 <ledDispMode+0x38>
		case 3:
			toggleAmber();
 8000fe2:	f7ff fe89 	bl	8000cf8 <toggleAmber>
			break;
 8000fe6:	e003      	b.n	8000ff0 <ledDispMode+0x38>
		case 4:
			toggleGreen();
 8000fe8:	f7ff feae 	bl	8000d48 <toggleGreen>
			break;
 8000fec:	e000      	b.n	8000ff0 <ledDispMode+0x38>
		default:
			break;
 8000fee:	bf00      	nop
	}
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000000 	.word	0x20000000

08000ff8 <ledScanning>:

void ledScanning(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	static int sw_led = 0;
	switch (sw_led) {
 8000ffc:	4b74      	ldr	r3, [pc, #464]	; (80011d0 <ledScanning+0x1d8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b04      	cmp	r3, #4
 8001002:	f200 80e2 	bhi.w	80011ca <ledScanning+0x1d2>
 8001006:	a201      	add	r2, pc, #4	; (adr r2, 800100c <ledScanning+0x14>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	08001021 	.word	0x08001021
 8001010:	08001075 	.word	0x08001075
 8001014:	080010d3 	.word	0x080010d3
 8001018:	08001127 	.word	0x08001127
 800101c:	08001185 	.word	0x08001185
		case 0:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001020:	2201      	movs	r2, #1
 8001022:	2110      	movs	r1, #16
 8001024:	486b      	ldr	r0, [pc, #428]	; (80011d4 <ledScanning+0x1dc>)
 8001026:	f001 f91a 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2120      	movs	r1, #32
 800102e:	4869      	ldr	r0, [pc, #420]	; (80011d4 <ledScanning+0x1dc>)
 8001030:	f001 f915 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2140      	movs	r1, #64	; 0x40
 8001038:	4866      	ldr	r0, [pc, #408]	; (80011d4 <ledScanning+0x1dc>)
 800103a:	f001 f910 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	4864      	ldr	r0, [pc, #400]	; (80011d4 <ledScanning+0x1dc>)
 8001044:	f001 f90b 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104e:	4861      	ldr	r0, [pc, #388]	; (80011d4 <ledScanning+0x1dc>)
 8001050:	f001 f905 	bl	800225e <HAL_GPIO_WritePin>
			display7SEG(get7SEG1Value() / 10);
 8001054:	f7ff ff54 	bl	8000f00 <get7SEG1Value>
 8001058:	4603      	mov	r3, r0
 800105a:	4a5f      	ldr	r2, [pc, #380]	; (80011d8 <ledScanning+0x1e0>)
 800105c:	fb82 1203 	smull	r1, r2, r2, r3
 8001060:	1092      	asrs	r2, r2, #2
 8001062:	17db      	asrs	r3, r3, #31
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fc6c 	bl	8000944 <display7SEG>
			sw_led = 1;
 800106c:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <ledScanning+0x1d8>)
 800106e:	2201      	movs	r2, #1
 8001070:	601a      	str	r2, [r3, #0]
			break;
 8001072:	e0ab      	b.n	80011cc <ledScanning+0x1d4>
		case 1:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	4856      	ldr	r0, [pc, #344]	; (80011d4 <ledScanning+0x1dc>)
 800107a:	f001 f8f0 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800107e:	2201      	movs	r2, #1
 8001080:	2120      	movs	r1, #32
 8001082:	4854      	ldr	r0, [pc, #336]	; (80011d4 <ledScanning+0x1dc>)
 8001084:	f001 f8eb 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2140      	movs	r1, #64	; 0x40
 800108c:	4851      	ldr	r0, [pc, #324]	; (80011d4 <ledScanning+0x1dc>)
 800108e:	f001 f8e6 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	484f      	ldr	r0, [pc, #316]	; (80011d4 <ledScanning+0x1dc>)
 8001098:	f001 f8e1 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a2:	484c      	ldr	r0, [pc, #304]	; (80011d4 <ledScanning+0x1dc>)
 80010a4:	f001 f8db 	bl	800225e <HAL_GPIO_WritePin>
			display7SEG(get7SEG1Value() % 10);
 80010a8:	f7ff ff2a 	bl	8000f00 <get7SEG1Value>
 80010ac:	4601      	mov	r1, r0
 80010ae:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <ledScanning+0x1e0>)
 80010b0:	fb83 2301 	smull	r2, r3, r3, r1
 80010b4:	109a      	asrs	r2, r3, #2
 80010b6:	17cb      	asrs	r3, r1, #31
 80010b8:	1ad2      	subs	r2, r2, r3
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	1aca      	subs	r2, r1, r3
 80010c4:	4610      	mov	r0, r2
 80010c6:	f7ff fc3d 	bl	8000944 <display7SEG>
			sw_led = 2;
 80010ca:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <ledScanning+0x1d8>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	601a      	str	r2, [r3, #0]
			break;
 80010d0:	e07c      	b.n	80011cc <ledScanning+0x1d4>
		case 2:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2110      	movs	r1, #16
 80010d6:	483f      	ldr	r0, [pc, #252]	; (80011d4 <ledScanning+0x1dc>)
 80010d8:	f001 f8c1 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2120      	movs	r1, #32
 80010e0:	483c      	ldr	r0, [pc, #240]	; (80011d4 <ledScanning+0x1dc>)
 80010e2:	f001 f8bc 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2140      	movs	r1, #64	; 0x40
 80010ea:	483a      	ldr	r0, [pc, #232]	; (80011d4 <ledScanning+0x1dc>)
 80010ec:	f001 f8b7 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	4837      	ldr	r0, [pc, #220]	; (80011d4 <ledScanning+0x1dc>)
 80010f6:	f001 f8b2 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001100:	4834      	ldr	r0, [pc, #208]	; (80011d4 <ledScanning+0x1dc>)
 8001102:	f001 f8ac 	bl	800225e <HAL_GPIO_WritePin>
			display7SEG(get7SEG2Value() / 10);
 8001106:	f7ff ff29 	bl	8000f5c <get7SEG2Value>
 800110a:	4603      	mov	r3, r0
 800110c:	4a32      	ldr	r2, [pc, #200]	; (80011d8 <ledScanning+0x1e0>)
 800110e:	fb82 1203 	smull	r1, r2, r2, r3
 8001112:	1092      	asrs	r2, r2, #2
 8001114:	17db      	asrs	r3, r3, #31
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fc13 	bl	8000944 <display7SEG>
			sw_led = 3;
 800111e:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <ledScanning+0x1d8>)
 8001120:	2203      	movs	r2, #3
 8001122:	601a      	str	r2, [r3, #0]
			break;
 8001124:	e052      	b.n	80011cc <ledScanning+0x1d4>
		case 3:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2110      	movs	r1, #16
 800112a:	482a      	ldr	r0, [pc, #168]	; (80011d4 <ledScanning+0x1dc>)
 800112c:	f001 f897 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	2120      	movs	r1, #32
 8001134:	4827      	ldr	r0, [pc, #156]	; (80011d4 <ledScanning+0x1dc>)
 8001136:	f001 f892 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	2140      	movs	r1, #64	; 0x40
 800113e:	4825      	ldr	r0, [pc, #148]	; (80011d4 <ledScanning+0x1dc>)
 8001140:	f001 f88d 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001144:	2201      	movs	r2, #1
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	4822      	ldr	r0, [pc, #136]	; (80011d4 <ledScanning+0x1dc>)
 800114a:	f001 f888 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001154:	481f      	ldr	r0, [pc, #124]	; (80011d4 <ledScanning+0x1dc>)
 8001156:	f001 f882 	bl	800225e <HAL_GPIO_WritePin>
			display7SEG(get7SEG2Value() % 10);
 800115a:	f7ff feff 	bl	8000f5c <get7SEG2Value>
 800115e:	4601      	mov	r1, r0
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <ledScanning+0x1e0>)
 8001162:	fb83 2301 	smull	r2, r3, r3, r1
 8001166:	109a      	asrs	r2, r3, #2
 8001168:	17cb      	asrs	r3, r1, #31
 800116a:	1ad2      	subs	r2, r2, r3
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	1aca      	subs	r2, r1, r3
 8001176:	4610      	mov	r0, r2
 8001178:	f7ff fbe4 	bl	8000944 <display7SEG>
			sw_led = 4;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <ledScanning+0x1d8>)
 800117e:	2204      	movs	r2, #4
 8001180:	601a      	str	r2, [r3, #0]
			break;
 8001182:	e023      	b.n	80011cc <ledScanning+0x1d4>
		case 4:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	2110      	movs	r1, #16
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <ledScanning+0x1dc>)
 800118a:	f001 f868 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2120      	movs	r1, #32
 8001192:	4810      	ldr	r0, [pc, #64]	; (80011d4 <ledScanning+0x1dc>)
 8001194:	f001 f863 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2140      	movs	r1, #64	; 0x40
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <ledScanning+0x1dc>)
 800119e:	f001 f85e 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	480b      	ldr	r0, [pc, #44]	; (80011d4 <ledScanning+0x1dc>)
 80011a8:	f001 f859 	bl	800225e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b2:	4808      	ldr	r0, [pc, #32]	; (80011d4 <ledScanning+0x1dc>)
 80011b4:	f001 f853 	bl	800225e <HAL_GPIO_WritePin>
			display7SEG(mode);
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <ledScanning+0x1e4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fbc1 	bl	8000944 <display7SEG>
			sw_led = 0;
 80011c2:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <ledScanning+0x1d8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
			break;
 80011c8:	e000      	b.n	80011cc <ledScanning+0x1d4>
		default:
			break;
 80011ca:	bf00      	nop
	}
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000084 	.word	0x20000084
 80011d4:	40010c00 	.word	0x40010c00
 80011d8:	66666667 	.word	0x66666667
 80011dc:	20000000 	.word	0x20000000

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e4:	f000 fd3a 	bl	8001c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e8:	f000 f838 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ec:	f000 f8be 	bl	800136c <MX_GPIO_Init>
  MX_TIM2_Init();
 80011f0:	f000 f870 	bl	80012d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80011f4:	4812      	ldr	r0, [pc, #72]	; (8001240 <main+0x60>)
 80011f6:	f001 fc8f 	bl	8002b18 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //SCH_INIT();

  SCH_ADD_TASK(initButton, 10, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	210a      	movs	r1, #10
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <main+0x64>)
 8001200:	f000 f928 	bl	8001454 <SCH_ADD_TASK>
  SCH_ADD_TASK(initLedTime, 20, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2114      	movs	r1, #20
 8001208:	480f      	ldr	r0, [pc, #60]	; (8001248 <main+0x68>)
 800120a:	f000 f923 	bl	8001454 <SCH_ADD_TASK>
  SCH_ADD_TASK(normalMode, 40, 1000);
 800120e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001212:	2128      	movs	r1, #40	; 0x28
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <main+0x6c>)
 8001216:	f000 f91d 	bl	8001454 <SCH_ADD_TASK>
  SCH_ADD_TASK(ledDispMode, 30, 250);
 800121a:	22fa      	movs	r2, #250	; 0xfa
 800121c:	211e      	movs	r1, #30
 800121e:	480c      	ldr	r0, [pc, #48]	; (8001250 <main+0x70>)
 8001220:	f000 f918 	bl	8001454 <SCH_ADD_TASK>
  SCH_ADD_TASK(ledScanning, 50, 50);
 8001224:	2232      	movs	r2, #50	; 0x32
 8001226:	2132      	movs	r1, #50	; 0x32
 8001228:	480a      	ldr	r0, [pc, #40]	; (8001254 <main+0x74>)
 800122a:	f000 f913 	bl	8001454 <SCH_ADD_TASK>
  SCH_ADD_TASK(fsm_for_input_processing, 60, 100);
 800122e:	2264      	movs	r2, #100	; 0x64
 8001230:	213c      	movs	r1, #60	; 0x3c
 8001232:	4809      	ldr	r0, [pc, #36]	; (8001258 <main+0x78>)
 8001234:	f000 f90e 	bl	8001454 <SCH_ADD_TASK>
  while (1)
  {
	  SCH_Dispatch_Task();
 8001238:	f000 fa22 	bl	8001680 <SCH_Dispatch_Task>
 800123c:	e7fc      	b.n	8001238 <main+0x58>
 800123e:	bf00      	nop
 8001240:	2000008c 	.word	0x2000008c
 8001244:	0800051d 	.word	0x0800051d
 8001248:	0800014d 	.word	0x0800014d
 800124c:	08000dd9 	.word	0x08000dd9
 8001250:	08000fb9 	.word	0x08000fb9
 8001254:	08000ff9 	.word	0x08000ff9
 8001258:	08000301 	.word	0x08000301

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b090      	sub	sp, #64	; 0x40
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	2228      	movs	r2, #40	; 0x28
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f002 f804 	bl	8003278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001282:	2301      	movs	r3, #1
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001286:	2310      	movs	r3, #16
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800128a:	2300      	movs	r3, #0
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128e:	f107 0318 	add.w	r3, r7, #24
 8001292:	4618      	mov	r0, r3
 8001294:	f001 f814 	bl	80022c0 <HAL_RCC_OscConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800129e:	f000 f8d3 	bl	8001448 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a2:	230f      	movs	r3, #15
 80012a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 fa80 	bl	80027c0 <HAL_RCC_ClockConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012c6:	f000 f8bf 	bl	8001448 <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3740      	adds	r7, #64	; 0x40
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_TIM2_Init+0x94>)
 80012f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_TIM2_Init+0x94>)
 80012fa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_TIM2_Init+0x94>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_TIM2_Init+0x94>)
 8001308:	2209      	movs	r2, #9
 800130a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_TIM2_Init+0x94>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_TIM2_Init+0x94>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001318:	4813      	ldr	r0, [pc, #76]	; (8001368 <MX_TIM2_Init+0x94>)
 800131a:	f001 fbad 	bl	8002a78 <HAL_TIM_Base_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001324:	f000 f890 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4619      	mov	r1, r3
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <MX_TIM2_Init+0x94>)
 8001336:	f001 fd2b 	bl	8002d90 <HAL_TIM_ConfigClockSource>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001340:	f000 f882 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	4619      	mov	r1, r3
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_TIM2_Init+0x94>)
 8001352:	f001 ff03 	bl	800315c <HAL_TIMEx_MasterConfigSynchronization>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800135c:	f000 f874 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	2000008c 	.word	0x2000008c

0800136c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b28      	ldr	r3, [pc, #160]	; (8001424 <MX_GPIO_Init+0xb8>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a27      	ldr	r2, [pc, #156]	; (8001424 <MX_GPIO_Init+0xb8>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <MX_GPIO_Init+0xb8>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <MX_GPIO_Init+0xb8>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a21      	ldr	r2, [pc, #132]	; (8001424 <MX_GPIO_Init+0xb8>)
 800139e:	f043 0308 	orr.w	r3, r3, #8
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_GPIO_Init+0xb8>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 80013b0:	2200      	movs	r2, #0
 80013b2:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80013b6:	481c      	ldr	r0, [pc, #112]	; (8001428 <MX_GPIO_Init+0xbc>)
 80013b8:	f000 ff51 	bl	800225e <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|LED_RED_1_Pin
                          |LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin|LED_AMBER_2_Pin
                          |LED_GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80013c2:	481a      	ldr	r0, [pc, #104]	; (800142c <MX_GPIO_Init+0xc0>)
 80013c4:	f000 ff4b 	bl	800225e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin LED_RED_1_Pin
                           LED_AMBER_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin LED_AMBER_2_Pin
                           LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 80013c8:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013cc:	60bb      	str	r3, [r7, #8]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|LED_RED_1_Pin
                          |LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin|LED_AMBER_2_Pin
                          |LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2302      	movs	r3, #2
 80013d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4619      	mov	r1, r3
 80013e0:	4811      	ldr	r0, [pc, #68]	; (8001428 <MX_GPIO_Init+0xbc>)
 80013e2:	f000 fdab 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80013e6:	2307      	movs	r3, #7
 80013e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4619      	mov	r1, r3
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_GPIO_Init+0xc0>)
 80013fa:	f000 fd9f 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           MODE_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80013fe:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8001402:	60bb      	str	r3, [r7, #8]
                          |MODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2302      	movs	r3, #2
 800140e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	4619      	mov	r1, r3
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_GPIO_Init+0xc0>)
 8001418:	f000 fd90 	bl	8001f3c <HAL_GPIO_Init>

}
 800141c:	bf00      	nop
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021000 	.word	0x40021000
 8001428:	40010800 	.word	0x40010800
 800142c:	40010c00 	.word	0x40010c00

08001430 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001438:	f000 f8fe 	bl	8001638 <SCH_Update>
	button_reading();
 800143c:	f7ff f8aa 	bl	8000594 <button_reading>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001450:	e7fe      	b.n	8001450 <Error_Handler+0x8>
	...

08001454 <SCH_ADD_TASK>:
	}
//	Error_code_G = ERROR_NONE;
//	Timer_init();
//	Watchdog_init();
}
uint32_t SCH_ADD_TASK(void (*pFunction)(), uint32_t Delay, uint32_t Period){
 8001454:	b4b0      	push	{r4, r5, r7}
 8001456:	b08d      	sub	sp, #52	; 0x34
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]

	if(current_index < SCH_MAX_TASKS){
 8001460:	4b72      	ldr	r3, [pc, #456]	; (800162c <SCH_ADD_TASK+0x1d8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b27      	cmp	r3, #39	; 0x27
 8001466:	f200 80db 	bhi.w	8001620 <SCH_ADD_TASK+0x1cc>
		SCH_Task_G[current_index].pTask = pFunction;
 800146a:	4b70      	ldr	r3, [pc, #448]	; (800162c <SCH_ADD_TASK+0x1d8>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4970      	ldr	r1, [pc, #448]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	601a      	str	r2, [r3, #0]
		SCH_Task_G[current_index].Delay = Delay / 10;
 800147e:	4b6b      	ldr	r3, [pc, #428]	; (800162c <SCH_ADD_TASK+0x1d8>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	496b      	ldr	r1, [pc, #428]	; (8001634 <SCH_ADD_TASK+0x1e0>)
 8001486:	fba1 1303 	umull	r1, r3, r1, r3
 800148a:	08d9      	lsrs	r1, r3, #3
 800148c:	4868      	ldr	r0, [pc, #416]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4403      	add	r3, r0
 8001498:	3308      	adds	r3, #8
 800149a:	6019      	str	r1, [r3, #0]
		SCH_Task_G[current_index].Period = Period / 10;
 800149c:	4b63      	ldr	r3, [pc, #396]	; (800162c <SCH_ADD_TASK+0x1d8>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4964      	ldr	r1, [pc, #400]	; (8001634 <SCH_ADD_TASK+0x1e0>)
 80014a4:	fba1 1303 	umull	r1, r3, r1, r3
 80014a8:	08d9      	lsrs	r1, r3, #3
 80014aa:	4861      	ldr	r0, [pc, #388]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4403      	add	r3, r0
 80014b6:	3304      	adds	r3, #4
 80014b8:	6019      	str	r1, [r3, #0]
		SCH_Task_G[current_index].RunMe = 0;
 80014ba:	4b5c      	ldr	r3, [pc, #368]	; (800162c <SCH_ADD_TASK+0x1d8>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	495c      	ldr	r1, [pc, #368]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	330c      	adds	r3, #12
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
		SCH_Task_G[current_index].TaskID = current_index;
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <SCH_ADD_TASK+0x1d8>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b55      	ldr	r3, [pc, #340]	; (800162c <SCH_ADD_TASK+0x1d8>)
 80014d6:	6819      	ldr	r1, [r3, #0]
 80014d8:	4855      	ldr	r0, [pc, #340]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4403      	add	r3, r0
 80014e4:	3310      	adds	r3, #16
 80014e6:	6019      	str	r1, [r3, #0]

		uint32_t j = 0, i = current_index;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ec:	4b4f      	ldr	r3, [pc, #316]	; (800162c <SCH_ADD_TASK+0x1d8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
		while(SCH_Task_G[j].Delay < SCH_Task_G[i].Delay){
 80014f2:	e01e      	b.n	8001532 <SCH_ADD_TASK+0xde>
			SCH_Task_G[i].Delay -= SCH_Task_G[j].Delay;
 80014f4:	494e      	ldr	r1, [pc, #312]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 80014f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	3308      	adds	r3, #8
 8001504:	6819      	ldr	r1, [r3, #0]
 8001506:	484a      	ldr	r0, [pc, #296]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 8001508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4403      	add	r3, r0
 8001514:	3308      	adds	r3, #8
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	1ac9      	subs	r1, r1, r3
 800151a:	4845      	ldr	r0, [pc, #276]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 800151c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4403      	add	r3, r0
 8001528:	3308      	adds	r3, #8
 800152a:	6019      	str	r1, [r3, #0]
			j++;
 800152c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152e:	3301      	adds	r3, #1
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(SCH_Task_G[j].Delay < SCH_Task_G[i].Delay){
 8001532:	493f      	ldr	r1, [pc, #252]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 8001534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	3308      	adds	r3, #8
 8001542:	6819      	ldr	r1, [r3, #0]
 8001544:	483a      	ldr	r0, [pc, #232]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 8001546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4403      	add	r3, r0
 8001552:	3308      	adds	r3, #8
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4299      	cmp	r1, r3
 8001558:	d3cc      	bcc.n	80014f4 <SCH_ADD_TASK+0xa0>
		}
		if(j != current_index){
 800155a:	4b34      	ldr	r3, [pc, #208]	; (800162c <SCH_ADD_TASK+0x1d8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001560:	429a      	cmp	r2, r3
 8001562:	d058      	beq.n	8001616 <SCH_ADD_TASK+0x1c2>
			SCH_Task_G[j].Delay -= SCH_Task_G[current_index].Delay;
 8001564:	4932      	ldr	r1, [pc, #200]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 8001566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	3308      	adds	r3, #8
 8001574:	6819      	ldr	r1, [r3, #0]
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <SCH_ADD_TASK+0x1d8>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	482d      	ldr	r0, [pc, #180]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4403      	add	r3, r0
 8001586:	3308      	adds	r3, #8
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	1ac9      	subs	r1, r1, r3
 800158c:	4828      	ldr	r0, [pc, #160]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 800158e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4403      	add	r3, r0
 800159a:	3308      	adds	r3, #8
 800159c:	6019      	str	r1, [r3, #0]
			sTasks tmp = SCH_Task_G[current_index];
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <SCH_ADD_TASK+0x1d8>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4923      	ldr	r1, [pc, #140]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	f107 0410 	add.w	r4, r7, #16
 80015b2:	461d      	mov	r5, r3
 80015b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	6023      	str	r3, [r4, #0]
			// dich phai
			uint32_t u;
			for(u = current_index; u > 0; u--){
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <SCH_ADD_TASK+0x1d8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c2:	e017      	b.n	80015f4 <SCH_ADD_TASK+0x1a0>
				SCH_Task_G[u] = SCH_Task_G[u - 1];
 80015c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c6:	1e5a      	subs	r2, r3, #1
 80015c8:	4819      	ldr	r0, [pc, #100]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 80015ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015cc:	460b      	mov	r3, r1
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4418      	add	r0, r3
 80015d6:	4916      	ldr	r1, [pc, #88]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	4604      	mov	r4, r0
 80015e4:	461d      	mov	r5, r3
 80015e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ea:	682b      	ldr	r3, [r5, #0]
 80015ec:	6023      	str	r3, [r4, #0]
			for(u = current_index; u > 0; u--){
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	3b01      	subs	r3, #1
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1e4      	bne.n	80015c4 <SCH_ADD_TASK+0x170>
			}
			SCH_Task_G[j] = tmp;
 80015fa:	490d      	ldr	r1, [pc, #52]	; (8001630 <SCH_ADD_TASK+0x1dc>)
 80015fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	461d      	mov	r5, r3
 800160a:	f107 0410 	add.w	r4, r7, #16
 800160e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	602b      	str	r3, [r5, #0]
		}
		current_index++;
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <SCH_ADD_TASK+0x1d8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	4a03      	ldr	r2, [pc, #12]	; (800162c <SCH_ADD_TASK+0x1d8>)
 800161e:	6013      	str	r3, [r2, #0]
	}
	return 1;
 8001620:	2301      	movs	r3, #1
}
 8001622:	4618      	mov	r0, r3
 8001624:	3734      	adds	r7, #52	; 0x34
 8001626:	46bd      	mov	sp, r7
 8001628:	bcb0      	pop	{r4, r5, r7}
 800162a:	4770      	bx	lr
 800162c:	20000088 	.word	0x20000088
 8001630:	200000d8 	.word	0x200000d8
 8001634:	cccccccd 	.word	0xcccccccd

08001638 <SCH_Update>:
void SCH_Update(){
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
	if(SCH_Task_G[0].pTask){
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <SCH_Update+0x44>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d017      	beq.n	8001674 <SCH_Update+0x3c>
		if(SCH_Task_G[0].Delay <= 0){
 8001644:	4b0d      	ldr	r3, [pc, #52]	; (800167c <SCH_Update+0x44>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10e      	bne.n	800166a <SCH_Update+0x32>
			SCH_Task_G[0].RunMe += 1;
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <SCH_Update+0x44>)
 800164e:	7b1b      	ldrb	r3, [r3, #12]
 8001650:	3301      	adds	r3, #1
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <SCH_Update+0x44>)
 8001656:	731a      	strb	r2, [r3, #12]
			if(SCH_Task_G[0].Period != 0){
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <SCH_Update+0x44>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d009      	beq.n	8001674 <SCH_Update+0x3c>
				SCH_Task_G[0].Delay = SCH_Task_G[0].Period;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <SCH_Update+0x44>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a05      	ldr	r2, [pc, #20]	; (800167c <SCH_Update+0x44>)
 8001666:	6093      	str	r3, [r2, #8]
		}
		else{
			SCH_Task_G[0].Delay -= 1;
		}
	}
}
 8001668:	e004      	b.n	8001674 <SCH_Update+0x3c>
			SCH_Task_G[0].Delay -= 1;
 800166a:	4b04      	ldr	r3, [pc, #16]	; (800167c <SCH_Update+0x44>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	3b01      	subs	r3, #1
 8001670:	4a02      	ldr	r2, [pc, #8]	; (800167c <SCH_Update+0x44>)
 8001672:	6093      	str	r3, [r2, #8]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	200000d8 	.word	0x200000d8

08001680 <SCH_Dispatch_Task>:
void SCH_Dispatch_Task(){
 8001680:	b5b0      	push	{r4, r5, r7, lr}
 8001682:	b08c      	sub	sp, #48	; 0x30
 8001684:	af00      	add	r7, sp, #0
	uint32_t i;
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800168a:	e18e      	b.n	80019aa <SCH_Dispatch_Task+0x32a>
		if(SCH_Task_G[i].RunMe > 0){
 800168c:	4966      	ldr	r1, [pc, #408]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 800168e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	330c      	adds	r3, #12
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8180 	beq.w	80019a4 <SCH_Dispatch_Task+0x324>
			SCH_Task_G[i].RunMe--;
 80016a4:	4960      	ldr	r1, [pc, #384]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 80016a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	330c      	adds	r3, #12
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b2d8      	uxtb	r0, r3
 80016ba:	495b      	ldr	r1, [pc, #364]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 80016bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	330c      	adds	r3, #12
 80016ca:	4602      	mov	r2, r0
 80016cc:	701a      	strb	r2, [r3, #0]
			(*SCH_Task_G[i].pTask)();
 80016ce:	4956      	ldr	r1, [pc, #344]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 80016d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4798      	blx	r3
			if (SCH_Task_G[i].Period == 0){
 80016e0:	4951      	ldr	r1, [pc, #324]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 80016e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	3304      	adds	r3, #4
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d103      	bne.n	80016fe <SCH_Dispatch_Task+0x7e>
				SCH_Delete(i);
 80016f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016f8:	f000 f962 	bl	80019c0 <SCH_Delete>
 80016fc:	e152      	b.n	80019a4 <SCH_Dispatch_Task+0x324>
			}
			else{
				// arrange lai
				uint32_t j;
				for(j = 0; j < SCH_MAX_TASKS; j++){
 80016fe:	2300      	movs	r3, #0
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
 8001702:	e147      	b.n	8001994 <SCH_Dispatch_Task+0x314>
					if(i == j) continue;
 8001704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001708:	429a      	cmp	r2, r3
 800170a:	d106      	bne.n	800171a <SCH_Dispatch_Task+0x9a>
				for(j = 0; j < SCH_MAX_TASKS; j++){
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170e:	3301      	adds	r3, #1
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
 8001712:	e13f      	b.n	8001994 <SCH_Dispatch_Task+0x314>

					while(SCH_Task_G[j].Delay == 0 && SCH_Task_G[j].pTask){
						j++;
 8001714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001716:	3301      	adds	r3, #1
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
					while(SCH_Task_G[j].Delay == 0 && SCH_Task_G[j].pTask){
 800171a:	4943      	ldr	r1, [pc, #268]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 800171c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	3308      	adds	r3, #8
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d109      	bne.n	8001744 <SCH_Dispatch_Task+0xc4>
 8001730:	493d      	ldr	r1, [pc, #244]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 8001732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1e7      	bne.n	8001714 <SCH_Dispatch_Task+0x94>
					}
					if(SCH_Task_G[j].pTask && SCH_Task_G[i].Delay <= SCH_Task_G[j].Delay){
 8001744:	4938      	ldr	r1, [pc, #224]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 8001746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80c4 	beq.w	80018e2 <SCH_Dispatch_Task+0x262>
 800175a:	4933      	ldr	r1, [pc, #204]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 800175c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	3308      	adds	r3, #8
 800176a:	6819      	ldr	r1, [r3, #0]
 800176c:	482e      	ldr	r0, [pc, #184]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 800176e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4403      	add	r3, r0
 800177a:	3308      	adds	r3, #8
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4299      	cmp	r1, r3
 8001780:	f200 80af 	bhi.w	80018e2 <SCH_Dispatch_Task+0x262>
						SCH_Task_G[j].Delay -= SCH_Task_G[i].Delay;
 8001784:	4928      	ldr	r1, [pc, #160]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 8001786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	3308      	adds	r3, #8
 8001794:	6819      	ldr	r1, [r3, #0]
 8001796:	4824      	ldr	r0, [pc, #144]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 8001798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4403      	add	r3, r0
 80017a4:	3308      	adds	r3, #8
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	1ac9      	subs	r1, r1, r3
 80017aa:	481f      	ldr	r0, [pc, #124]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 80017ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4403      	add	r3, r0
 80017b8:	3308      	adds	r3, #8
 80017ba:	6019      	str	r1, [r3, #0]
						// can phai swap neu j < i
						if(j < i){
 80017bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c0:	429a      	cmp	r2, r3
 80017c2:	f080 80ec 	bcs.w	800199e <SCH_Dispatch_Task+0x31e>
							sTasks tmp = SCH_Task_G[i];
 80017c6:	4918      	ldr	r1, [pc, #96]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 80017c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	f107 0414 	add.w	r4, r7, #20
 80017d8:	461d      	mov	r5, r3
 80017da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017de:	682b      	ldr	r3, [r5, #0]
 80017e0:	6023      	str	r3, [r4, #0]
							SCH_Task_G[i] = SCH_Task_G[j];
 80017e2:	4911      	ldr	r1, [pc, #68]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 80017e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	18c8      	adds	r0, r1, r3
 80017f0:	490d      	ldr	r1, [pc, #52]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 80017f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	4604      	mov	r4, r0
 8001800:	461d      	mov	r5, r3
 8001802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001806:	682b      	ldr	r3, [r5, #0]
 8001808:	6023      	str	r3, [r4, #0]
							SCH_Task_G[j] = tmp;
 800180a:	4907      	ldr	r1, [pc, #28]	; (8001828 <SCH_Dispatch_Task+0x1a8>)
 800180c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	461d      	mov	r5, r3
 800181a:	f107 0414 	add.w	r4, r7, #20
 800181e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001820:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	602b      	str	r3, [r5, #0]
						}
						break;
 8001826:	e0ba      	b.n	800199e <SCH_Dispatch_Task+0x31e>
 8001828:	200000d8 	.word	0x200000d8
					}
					else{
						while(SCH_Task_G[j].pTask && SCH_Task_G[i].Delay > SCH_Task_G[j].Delay){

							SCH_Task_G[i].Delay -= SCH_Task_G[j].Delay;
 800182c:	4963      	ldr	r1, [pc, #396]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 800182e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	3308      	adds	r3, #8
 800183c:	6819      	ldr	r1, [r3, #0]
 800183e:	485f      	ldr	r0, [pc, #380]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 8001840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4403      	add	r3, r0
 800184c:	3308      	adds	r3, #8
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	1ac9      	subs	r1, r1, r3
 8001852:	485a      	ldr	r0, [pc, #360]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 8001854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4403      	add	r3, r0
 8001860:	3308      	adds	r3, #8
 8001862:	6019      	str	r1, [r3, #0]
							//chi swap neu nhu j > i
							if(j > i){
 8001864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	429a      	cmp	r2, r3
 800186a:	d930      	bls.n	80018ce <SCH_Dispatch_Task+0x24e>
								sTasks tmp = SCH_Task_G[i];
 800186c:	4953      	ldr	r1, [pc, #332]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 800186e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	463c      	mov	r4, r7
 800187c:	461d      	mov	r5, r3
 800187e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001882:	682b      	ldr	r3, [r5, #0]
 8001884:	6023      	str	r3, [r4, #0]
								SCH_Task_G[i] = SCH_Task_G[j];
 8001886:	494d      	ldr	r1, [pc, #308]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 8001888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	18c8      	adds	r0, r1, r3
 8001894:	4949      	ldr	r1, [pc, #292]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 8001896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	4604      	mov	r4, r0
 80018a4:	461d      	mov	r5, r3
 80018a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018aa:	682b      	ldr	r3, [r5, #0]
 80018ac:	6023      	str	r3, [r4, #0]
								SCH_Task_G[j] = tmp;
 80018ae:	4943      	ldr	r1, [pc, #268]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 80018b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	461d      	mov	r5, r3
 80018be:	463c      	mov	r4, r7
 80018c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	602b      	str	r3, [r5, #0]
								i++;
 80018c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ca:	3301      	adds	r3, #1
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
							}
							j++;
 80018ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d0:	3301      	adds	r3, #1
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
							if(i == j) j++;
 80018d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d8:	429a      	cmp	r2, r3
 80018da:	d102      	bne.n	80018e2 <SCH_Dispatch_Task+0x262>
 80018dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018de:	3301      	adds	r3, #1
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
						while(SCH_Task_G[j].pTask && SCH_Task_G[i].Delay > SCH_Task_G[j].Delay){
 80018e2:	4936      	ldr	r1, [pc, #216]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 80018e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d013      	beq.n	800191e <SCH_Dispatch_Task+0x29e>
 80018f6:	4931      	ldr	r1, [pc, #196]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 80018f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3308      	adds	r3, #8
 8001906:	6819      	ldr	r1, [r3, #0]
 8001908:	482c      	ldr	r0, [pc, #176]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 800190a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4403      	add	r3, r0
 8001916:	3308      	adds	r3, #8
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4299      	cmp	r1, r3
 800191c:	d886      	bhi.n	800182c <SCH_Dispatch_Task+0x1ac>
						}
						if(SCH_Task_G[j].pTask && SCH_Task_G[i].Delay <= SCH_Task_G[j].Delay){
 800191e:	4927      	ldr	r1, [pc, #156]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 8001920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d037      	beq.n	80019a2 <SCH_Dispatch_Task+0x322>
 8001932:	4922      	ldr	r1, [pc, #136]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 8001934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	3308      	adds	r3, #8
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	481d      	ldr	r0, [pc, #116]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 8001946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4403      	add	r3, r0
 8001952:	3308      	adds	r3, #8
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4299      	cmp	r1, r3
 8001958:	d823      	bhi.n	80019a2 <SCH_Dispatch_Task+0x322>
							SCH_Task_G[j].Delay -= SCH_Task_G[i].Delay;
 800195a:	4918      	ldr	r1, [pc, #96]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 800195c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	3308      	adds	r3, #8
 800196a:	6819      	ldr	r1, [r3, #0]
 800196c:	4813      	ldr	r0, [pc, #76]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 800196e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4403      	add	r3, r0
 800197a:	3308      	adds	r3, #8
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	1ac9      	subs	r1, r1, r3
 8001980:	480e      	ldr	r0, [pc, #56]	; (80019bc <SCH_Dispatch_Task+0x33c>)
 8001982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4403      	add	r3, r0
 800198e:	3308      	adds	r3, #8
 8001990:	6019      	str	r1, [r3, #0]
						}
						break;
 8001992:	e006      	b.n	80019a2 <SCH_Dispatch_Task+0x322>
				for(j = 0; j < SCH_MAX_TASKS; j++){
 8001994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001996:	2b27      	cmp	r3, #39	; 0x27
 8001998:	f67f aeb4 	bls.w	8001704 <SCH_Dispatch_Task+0x84>
 800199c:	e002      	b.n	80019a4 <SCH_Dispatch_Task+0x324>
						break;
 800199e:	bf00      	nop
 80019a0:	e000      	b.n	80019a4 <SCH_Dispatch_Task+0x324>
						break;
 80019a2:	bf00      	nop
	for(i = 0; i < SCH_MAX_TASKS; i++){
 80019a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a6:	3301      	adds	r3, #1
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ac:	2b27      	cmp	r3, #39	; 0x27
 80019ae:	f67f ae6d 	bls.w	800168c <SCH_Dispatch_Task+0xc>
			}
		}
	}
	//SCH_Report_Status();
	//SCH_Go_To_Sleep();
}
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	3730      	adds	r7, #48	; 0x30
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bdb0      	pop	{r4, r5, r7, pc}
 80019bc:	200000d8 	.word	0x200000d8

080019c0 <SCH_Delete>:

void SCH_Delete(uint32_t TaskID){
 80019c0:	b4b0      	push	{r4, r5, r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	SCH_Task_G[TaskID].pTask = 0x0000;
 80019c8:	4949      	ldr	r1, [pc, #292]	; (8001af0 <SCH_Delete+0x130>)
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
	SCH_Task_G[TaskID].Period = 0;
 80019da:	4945      	ldr	r1, [pc, #276]	; (8001af0 <SCH_Delete+0x130>)
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	3304      	adds	r3, #4
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
	SCH_Task_G[TaskID].Delay = 0;
 80019ee:	4940      	ldr	r1, [pc, #256]	; (8001af0 <SCH_Delete+0x130>)
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	3308      	adds	r3, #8
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
	SCH_Task_G[TaskID].RunMe = 0;
 8001a02:	493b      	ldr	r1, [pc, #236]	; (8001af0 <SCH_Delete+0x130>)
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	330c      	adds	r3, #12
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
	SCH_Task_G[TaskID].TaskID = 0;
 8001a16:	4936      	ldr	r1, [pc, #216]	; (8001af0 <SCH_Delete+0x130>)
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	3310      	adds	r3, #16
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]



	uint32_t i;
	// dich trai cai phan tu
	for(i = TaskID; i < SCH_MAX_TASKS - 1; i++){
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	e055      	b.n	8001adc <SCH_Delete+0x11c>
		if(SCH_Task_G[i + 1].pTask){
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	492e      	ldr	r1, [pc, #184]	; (8001af0 <SCH_Delete+0x130>)
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d015      	beq.n	8001a72 <SCH_Delete+0xb2>
			SCH_Task_G[i] = SCH_Task_G[i + 1];
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	4829      	ldr	r0, [pc, #164]	; (8001af0 <SCH_Delete+0x130>)
 8001a4c:	68f9      	ldr	r1, [r7, #12]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4418      	add	r0, r3
 8001a58:	4925      	ldr	r1, [pc, #148]	; (8001af0 <SCH_Delete+0x130>)
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	4604      	mov	r4, r0
 8001a66:	461d      	mov	r5, r3
 8001a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a6c:	682b      	ldr	r3, [r5, #0]
 8001a6e:	6023      	str	r3, [r4, #0]
 8001a70:	e031      	b.n	8001ad6 <SCH_Delete+0x116>
		}
		else{
			SCH_Task_G[i].pTask = 0x0000;
 8001a72:	491f      	ldr	r1, [pc, #124]	; (8001af0 <SCH_Delete+0x130>)
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
			SCH_Task_G[i].Period = 0;
 8001a84:	491a      	ldr	r1, [pc, #104]	; (8001af0 <SCH_Delete+0x130>)
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	3304      	adds	r3, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
			SCH_Task_G[i].Delay = 0;
 8001a98:	4915      	ldr	r1, [pc, #84]	; (8001af0 <SCH_Delete+0x130>)
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
			SCH_Task_G[i].RunMe = 0;
 8001aac:	4910      	ldr	r1, [pc, #64]	; (8001af0 <SCH_Delete+0x130>)
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	330c      	adds	r3, #12
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
			SCH_Task_G[i].TaskID = 0;
 8001ac0:	490b      	ldr	r1, [pc, #44]	; (8001af0 <SCH_Delete+0x130>)
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	3310      	adds	r3, #16
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

			break;
 8001ad4:	e006      	b.n	8001ae4 <SCH_Delete+0x124>
	for(i = TaskID; i < SCH_MAX_TASKS - 1; i++){
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b26      	cmp	r3, #38	; 0x26
 8001ae0:	d9a6      	bls.n	8001a30 <SCH_Delete+0x70>
		}
	}
}
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bcb0      	pop	{r4, r5, r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	200000d8 	.word	0x200000d8

08001af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_MspInit+0x5c>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <HAL_MspInit+0x5c>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6193      	str	r3, [r2, #24]
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_MspInit+0x5c>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_MspInit+0x5c>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <HAL_MspInit+0x5c>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	61d3      	str	r3, [r2, #28]
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_MspInit+0x5c>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_MspInit+0x60>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <HAL_MspInit+0x60>)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010000 	.word	0x40010000

08001b58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b68:	d113      	bne.n	8001b92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <HAL_TIM_Base_MspInit+0x44>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <HAL_TIM_Base_MspInit+0x44>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	61d3      	str	r3, [r2, #28]
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_TIM_Base_MspInit+0x44>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	201c      	movs	r0, #28
 8001b88:	f000 f9a1 	bl	8001ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b8c:	201c      	movs	r0, #28
 8001b8e:	f000 f9ba 	bl	8001f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <NMI_Handler+0x4>

08001ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <HardFault_Handler+0x4>

08001bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <MemManage_Handler+0x4>

08001bb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <BusFault_Handler+0x4>

08001bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <UsageFault_Handler+0x4>

08001bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be6:	f000 f87f 	bl	8001ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <TIM2_IRQHandler+0x10>)
 8001bf6:	f000 ffdb 	bl	8002bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2000008c 	.word	0x2000008c

08001c04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c10:	f7ff fff8 	bl	8001c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c16:	490c      	ldr	r1, [pc, #48]	; (8001c48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c18:	4a0c      	ldr	r2, [pc, #48]	; (8001c4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c1c:	e002      	b.n	8001c24 <LoopCopyDataInit>

08001c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c22:	3304      	adds	r3, #4

08001c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c28:	d3f9      	bcc.n	8001c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c2c:	4c09      	ldr	r4, [pc, #36]	; (8001c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c30:	e001      	b.n	8001c36 <LoopFillZerobss>

08001c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c34:	3204      	adds	r2, #4

08001c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c38:	d3fb      	bcc.n	8001c32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c3a:	f001 faf9 	bl	8003230 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c3e:	f7ff facf 	bl	80011e0 <main>
  bx lr
 8001c42:	4770      	bx	lr
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001c4c:	080032cc 	.word	0x080032cc
  ldr r2, =_sbss
 8001c50:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001c54:	200003fc 	.word	0x200003fc

08001c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC1_2_IRQHandler>
	...

08001c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_Init+0x28>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_Init+0x28>)
 8001c66:	f043 0310 	orr.w	r3, r3, #16
 8001c6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f000 f923 	bl	8001eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c72:	200f      	movs	r0, #15
 8001c74:	f000 f808 	bl	8001c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c78:	f7ff ff3c 	bl	8001af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40022000 	.word	0x40022000

08001c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_InitTick+0x54>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_InitTick+0x58>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f93b 	bl	8001f22 <HAL_SYSTICK_Config>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00e      	b.n	8001cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b0f      	cmp	r3, #15
 8001cba:	d80a      	bhi.n	8001cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f000 f903 	bl	8001ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc8:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <HAL_InitTick+0x5c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000030 	.word	0x20000030
 8001ce0:	20000038 	.word	0x20000038
 8001ce4:	20000034 	.word	0x20000034

08001ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_IncTick+0x1c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_IncTick+0x20>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a03      	ldr	r2, [pc, #12]	; (8001d08 <HAL_IncTick+0x20>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	20000038 	.word	0x20000038
 8001d08:	200003f8 	.word	0x200003f8

08001d0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d10:	4b02      	ldr	r3, [pc, #8]	; (8001d1c <HAL_GetTick+0x10>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	200003f8 	.word	0x200003f8

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db0b      	blt.n	8001dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4906      	ldr	r1, [pc, #24]	; (8001db8 <__NVIC_EnableIRQ+0x34>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2001      	movs	r0, #1
 8001da6:	fa00 f202 	lsl.w	r2, r0, r2
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100

08001dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db0a      	blt.n	8001de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	490c      	ldr	r1, [pc, #48]	; (8001e08 <__NVIC_SetPriority+0x4c>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de4:	e00a      	b.n	8001dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4908      	ldr	r1, [pc, #32]	; (8001e0c <__NVIC_SetPriority+0x50>)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3b04      	subs	r3, #4
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	440b      	add	r3, r1
 8001dfa:	761a      	strb	r2, [r3, #24]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f1c3 0307 	rsb	r3, r3, #7
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	bf28      	it	cs
 8001e2e:	2304      	movcs	r3, #4
 8001e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d902      	bls.n	8001e40 <NVIC_EncodePriority+0x30>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3b03      	subs	r3, #3
 8001e3e:	e000      	b.n	8001e42 <NVIC_EncodePriority+0x32>
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43d9      	mvns	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	4313      	orrs	r3, r2
         );
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e84:	d301      	bcc.n	8001e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00f      	b.n	8001eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <SysTick_Config+0x40>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e92:	210f      	movs	r1, #15
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	f7ff ff90 	bl	8001dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <SysTick_Config+0x40>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <SysTick_Config+0x40>)
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	e000e010 	.word	0xe000e010

08001eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff2d 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee0:	f7ff ff42 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	6978      	ldr	r0, [r7, #20]
 8001eec:	f7ff ff90 	bl	8001e10 <NVIC_EncodePriority>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff5f 	bl	8001dbc <__NVIC_SetPriority>
}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff35 	bl	8001d84 <__NVIC_EnableIRQ>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ffa2 	bl	8001e74 <SysTick_Config>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b08b      	sub	sp, #44	; 0x2c
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f4e:	e148      	b.n	80021e2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f50:	2201      	movs	r2, #1
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	f040 8137 	bne.w	80021dc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4aa3      	ldr	r2, [pc, #652]	; (8002200 <HAL_GPIO_Init+0x2c4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d05e      	beq.n	8002036 <HAL_GPIO_Init+0xfa>
 8001f78:	4aa1      	ldr	r2, [pc, #644]	; (8002200 <HAL_GPIO_Init+0x2c4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d875      	bhi.n	800206a <HAL_GPIO_Init+0x12e>
 8001f7e:	4aa1      	ldr	r2, [pc, #644]	; (8002204 <HAL_GPIO_Init+0x2c8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d058      	beq.n	8002036 <HAL_GPIO_Init+0xfa>
 8001f84:	4a9f      	ldr	r2, [pc, #636]	; (8002204 <HAL_GPIO_Init+0x2c8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d86f      	bhi.n	800206a <HAL_GPIO_Init+0x12e>
 8001f8a:	4a9f      	ldr	r2, [pc, #636]	; (8002208 <HAL_GPIO_Init+0x2cc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d052      	beq.n	8002036 <HAL_GPIO_Init+0xfa>
 8001f90:	4a9d      	ldr	r2, [pc, #628]	; (8002208 <HAL_GPIO_Init+0x2cc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d869      	bhi.n	800206a <HAL_GPIO_Init+0x12e>
 8001f96:	4a9d      	ldr	r2, [pc, #628]	; (800220c <HAL_GPIO_Init+0x2d0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d04c      	beq.n	8002036 <HAL_GPIO_Init+0xfa>
 8001f9c:	4a9b      	ldr	r2, [pc, #620]	; (800220c <HAL_GPIO_Init+0x2d0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d863      	bhi.n	800206a <HAL_GPIO_Init+0x12e>
 8001fa2:	4a9b      	ldr	r2, [pc, #620]	; (8002210 <HAL_GPIO_Init+0x2d4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d046      	beq.n	8002036 <HAL_GPIO_Init+0xfa>
 8001fa8:	4a99      	ldr	r2, [pc, #612]	; (8002210 <HAL_GPIO_Init+0x2d4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d85d      	bhi.n	800206a <HAL_GPIO_Init+0x12e>
 8001fae:	2b12      	cmp	r3, #18
 8001fb0:	d82a      	bhi.n	8002008 <HAL_GPIO_Init+0xcc>
 8001fb2:	2b12      	cmp	r3, #18
 8001fb4:	d859      	bhi.n	800206a <HAL_GPIO_Init+0x12e>
 8001fb6:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <HAL_GPIO_Init+0x80>)
 8001fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbc:	08002037 	.word	0x08002037
 8001fc0:	08002011 	.word	0x08002011
 8001fc4:	08002023 	.word	0x08002023
 8001fc8:	08002065 	.word	0x08002065
 8001fcc:	0800206b 	.word	0x0800206b
 8001fd0:	0800206b 	.word	0x0800206b
 8001fd4:	0800206b 	.word	0x0800206b
 8001fd8:	0800206b 	.word	0x0800206b
 8001fdc:	0800206b 	.word	0x0800206b
 8001fe0:	0800206b 	.word	0x0800206b
 8001fe4:	0800206b 	.word	0x0800206b
 8001fe8:	0800206b 	.word	0x0800206b
 8001fec:	0800206b 	.word	0x0800206b
 8001ff0:	0800206b 	.word	0x0800206b
 8001ff4:	0800206b 	.word	0x0800206b
 8001ff8:	0800206b 	.word	0x0800206b
 8001ffc:	0800206b 	.word	0x0800206b
 8002000:	08002019 	.word	0x08002019
 8002004:	0800202d 	.word	0x0800202d
 8002008:	4a82      	ldr	r2, [pc, #520]	; (8002214 <HAL_GPIO_Init+0x2d8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800200e:	e02c      	b.n	800206a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	623b      	str	r3, [r7, #32]
          break;
 8002016:	e029      	b.n	800206c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	3304      	adds	r3, #4
 800201e:	623b      	str	r3, [r7, #32]
          break;
 8002020:	e024      	b.n	800206c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	3308      	adds	r3, #8
 8002028:	623b      	str	r3, [r7, #32]
          break;
 800202a:	e01f      	b.n	800206c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	330c      	adds	r3, #12
 8002032:	623b      	str	r3, [r7, #32]
          break;
 8002034:	e01a      	b.n	800206c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800203e:	2304      	movs	r3, #4
 8002040:	623b      	str	r3, [r7, #32]
          break;
 8002042:	e013      	b.n	800206c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d105      	bne.n	8002058 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800204c:	2308      	movs	r3, #8
 800204e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	611a      	str	r2, [r3, #16]
          break;
 8002056:	e009      	b.n	800206c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002058:	2308      	movs	r3, #8
 800205a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	615a      	str	r2, [r3, #20]
          break;
 8002062:	e003      	b.n	800206c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
          break;
 8002068:	e000      	b.n	800206c <HAL_GPIO_Init+0x130>
          break;
 800206a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2bff      	cmp	r3, #255	; 0xff
 8002070:	d801      	bhi.n	8002076 <HAL_GPIO_Init+0x13a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	e001      	b.n	800207a <HAL_GPIO_Init+0x13e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3304      	adds	r3, #4
 800207a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2bff      	cmp	r3, #255	; 0xff
 8002080:	d802      	bhi.n	8002088 <HAL_GPIO_Init+0x14c>
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	e002      	b.n	800208e <HAL_GPIO_Init+0x152>
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	3b08      	subs	r3, #8
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	210f      	movs	r1, #15
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	401a      	ands	r2, r3
 80020a0:	6a39      	ldr	r1, [r7, #32]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	fa01 f303 	lsl.w	r3, r1, r3
 80020a8:	431a      	orrs	r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8090 	beq.w	80021dc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020bc:	4b56      	ldr	r3, [pc, #344]	; (8002218 <HAL_GPIO_Init+0x2dc>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a55      	ldr	r2, [pc, #340]	; (8002218 <HAL_GPIO_Init+0x2dc>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b53      	ldr	r3, [pc, #332]	; (8002218 <HAL_GPIO_Init+0x2dc>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020d4:	4a51      	ldr	r2, [pc, #324]	; (800221c <HAL_GPIO_Init+0x2e0>)
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	3302      	adds	r3, #2
 80020dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	220f      	movs	r2, #15
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a49      	ldr	r2, [pc, #292]	; (8002220 <HAL_GPIO_Init+0x2e4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00d      	beq.n	800211c <HAL_GPIO_Init+0x1e0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a48      	ldr	r2, [pc, #288]	; (8002224 <HAL_GPIO_Init+0x2e8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d007      	beq.n	8002118 <HAL_GPIO_Init+0x1dc>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a47      	ldr	r2, [pc, #284]	; (8002228 <HAL_GPIO_Init+0x2ec>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_GPIO_Init+0x1d8>
 8002110:	2302      	movs	r3, #2
 8002112:	e004      	b.n	800211e <HAL_GPIO_Init+0x1e2>
 8002114:	2303      	movs	r3, #3
 8002116:	e002      	b.n	800211e <HAL_GPIO_Init+0x1e2>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <HAL_GPIO_Init+0x1e2>
 800211c:	2300      	movs	r3, #0
 800211e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002120:	f002 0203 	and.w	r2, r2, #3
 8002124:	0092      	lsls	r2, r2, #2
 8002126:	4093      	lsls	r3, r2
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800212e:	493b      	ldr	r1, [pc, #236]	; (800221c <HAL_GPIO_Init+0x2e0>)
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d006      	beq.n	8002156 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002148:	4b38      	ldr	r3, [pc, #224]	; (800222c <HAL_GPIO_Init+0x2f0>)
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	4937      	ldr	r1, [pc, #220]	; (800222c <HAL_GPIO_Init+0x2f0>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	608b      	str	r3, [r1, #8]
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002156:	4b35      	ldr	r3, [pc, #212]	; (800222c <HAL_GPIO_Init+0x2f0>)
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	43db      	mvns	r3, r3
 800215e:	4933      	ldr	r1, [pc, #204]	; (800222c <HAL_GPIO_Init+0x2f0>)
 8002160:	4013      	ands	r3, r2
 8002162:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002170:	4b2e      	ldr	r3, [pc, #184]	; (800222c <HAL_GPIO_Init+0x2f0>)
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	492d      	ldr	r1, [pc, #180]	; (800222c <HAL_GPIO_Init+0x2f0>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	60cb      	str	r3, [r1, #12]
 800217c:	e006      	b.n	800218c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800217e:	4b2b      	ldr	r3, [pc, #172]	; (800222c <HAL_GPIO_Init+0x2f0>)
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	43db      	mvns	r3, r3
 8002186:	4929      	ldr	r1, [pc, #164]	; (800222c <HAL_GPIO_Init+0x2f0>)
 8002188:	4013      	ands	r3, r2
 800218a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002198:	4b24      	ldr	r3, [pc, #144]	; (800222c <HAL_GPIO_Init+0x2f0>)
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	4923      	ldr	r1, [pc, #140]	; (800222c <HAL_GPIO_Init+0x2f0>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021a6:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_GPIO_Init+0x2f0>)
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	491f      	ldr	r1, [pc, #124]	; (800222c <HAL_GPIO_Init+0x2f0>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d006      	beq.n	80021ce <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021c0:	4b1a      	ldr	r3, [pc, #104]	; (800222c <HAL_GPIO_Init+0x2f0>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4919      	ldr	r1, [pc, #100]	; (800222c <HAL_GPIO_Init+0x2f0>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]
 80021cc:	e006      	b.n	80021dc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_GPIO_Init+0x2f0>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	4915      	ldr	r1, [pc, #84]	; (800222c <HAL_GPIO_Init+0x2f0>)
 80021d8:	4013      	ands	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	3301      	adds	r3, #1
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f47f aeaf 	bne.w	8001f50 <HAL_GPIO_Init+0x14>
  }
}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	372c      	adds	r7, #44	; 0x2c
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	10320000 	.word	0x10320000
 8002204:	10310000 	.word	0x10310000
 8002208:	10220000 	.word	0x10220000
 800220c:	10210000 	.word	0x10210000
 8002210:	10120000 	.word	0x10120000
 8002214:	10110000 	.word	0x10110000
 8002218:	40021000 	.word	0x40021000
 800221c:	40010000 	.word	0x40010000
 8002220:	40010800 	.word	0x40010800
 8002224:	40010c00 	.word	0x40010c00
 8002228:	40011000 	.word	0x40011000
 800222c:	40010400 	.word	0x40010400

08002230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	887b      	ldrh	r3, [r7, #2]
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	e001      	b.n	8002252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	807b      	strh	r3, [r7, #2]
 800226a:	4613      	mov	r3, r2
 800226c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800226e:	787b      	ldrb	r3, [r7, #1]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002274:	887a      	ldrh	r2, [r7, #2]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800227a:	e003      	b.n	8002284 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800227c:	887b      	ldrh	r3, [r7, #2]
 800227e:	041a      	lsls	r2, r3, #16
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	611a      	str	r2, [r3, #16]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800228e:	b480      	push	{r7}
 8002290:	b085      	sub	sp, #20
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022a0:	887a      	ldrh	r2, [r7, #2]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4013      	ands	r3, r2
 80022a6:	041a      	lsls	r2, r3, #16
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43d9      	mvns	r1, r3
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	400b      	ands	r3, r1
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	611a      	str	r2, [r3, #16]
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e26c      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8087 	beq.w	80023ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e0:	4b92      	ldr	r3, [pc, #584]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d00c      	beq.n	8002306 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022ec:	4b8f      	ldr	r3, [pc, #572]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d112      	bne.n	800231e <HAL_RCC_OscConfig+0x5e>
 80022f8:	4b8c      	ldr	r3, [pc, #560]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002304:	d10b      	bne.n	800231e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002306:	4b89      	ldr	r3, [pc, #548]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d06c      	beq.n	80023ec <HAL_RCC_OscConfig+0x12c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d168      	bne.n	80023ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e246      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x76>
 8002328:	4b80      	ldr	r3, [pc, #512]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a7f      	ldr	r2, [pc, #508]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800232e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	e02e      	b.n	8002394 <HAL_RCC_OscConfig+0xd4>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x98>
 800233e:	4b7b      	ldr	r3, [pc, #492]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a7a      	ldr	r2, [pc, #488]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b78      	ldr	r3, [pc, #480]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a77      	ldr	r2, [pc, #476]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e01d      	b.n	8002394 <HAL_RCC_OscConfig+0xd4>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0xbc>
 8002362:	4b72      	ldr	r3, [pc, #456]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a71      	ldr	r2, [pc, #452]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6e      	ldr	r2, [pc, #440]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0xd4>
 800237c:	4b6b      	ldr	r3, [pc, #428]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a6a      	ldr	r2, [pc, #424]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b68      	ldr	r3, [pc, #416]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a67      	ldr	r2, [pc, #412]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800238e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002392:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff fcb6 	bl	8001d0c <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a4:	f7ff fcb2 	bl	8001d0c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e1fa      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b5d      	ldr	r3, [pc, #372]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0xe4>
 80023c2:	e014      	b.n	80023ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7ff fca2 	bl	8001d0c <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023cc:	f7ff fc9e 	bl	8001d0c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1e6      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x10c>
 80023ea:	e000      	b.n	80023ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d063      	beq.n	80024c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023fa:	4b4c      	ldr	r3, [pc, #304]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002406:	4b49      	ldr	r3, [pc, #292]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b08      	cmp	r3, #8
 8002410:	d11c      	bne.n	800244c <HAL_RCC_OscConfig+0x18c>
 8002412:	4b46      	ldr	r3, [pc, #280]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d116      	bne.n	800244c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	4b43      	ldr	r3, [pc, #268]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x176>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d001      	beq.n	8002436 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e1ba      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4939      	ldr	r1, [pc, #228]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	e03a      	b.n	80024c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002454:	4b36      	ldr	r3, [pc, #216]	; (8002530 <HAL_RCC_OscConfig+0x270>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7ff fc57 	bl	8001d0c <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002462:	f7ff fc53 	bl	8001d0c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e19b      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b2a      	ldr	r3, [pc, #168]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4927      	ldr	r1, [pc, #156]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
 8002494:	e015      	b.n	80024c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <HAL_RCC_OscConfig+0x270>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7ff fc36 	bl	8001d0c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a4:	f7ff fc32 	bl	8001d0c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e17a      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d03a      	beq.n	8002544 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d019      	beq.n	800250a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7ff fc16 	bl	8001d0c <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e4:	f7ff fc12 	bl	8001d0c <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e15a      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002502:	2001      	movs	r0, #1
 8002504:	f000 fa9a 	bl	8002a3c <RCC_Delay>
 8002508:	e01c      	b.n	8002544 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002510:	f7ff fbfc 	bl	8001d0c <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002516:	e00f      	b.n	8002538 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002518:	f7ff fbf8 	bl	8001d0c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d908      	bls.n	8002538 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e140      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	42420000 	.word	0x42420000
 8002534:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	4b9e      	ldr	r3, [pc, #632]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1e9      	bne.n	8002518 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80a6 	beq.w	800269e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b97      	ldr	r3, [pc, #604]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10d      	bne.n	800257e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	4b94      	ldr	r3, [pc, #592]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a93      	ldr	r2, [pc, #588]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256c:	61d3      	str	r3, [r2, #28]
 800256e:	4b91      	ldr	r3, [pc, #580]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257a:	2301      	movs	r3, #1
 800257c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	4b8e      	ldr	r3, [pc, #568]	; (80027b8 <HAL_RCC_OscConfig+0x4f8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d118      	bne.n	80025bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258a:	4b8b      	ldr	r3, [pc, #556]	; (80027b8 <HAL_RCC_OscConfig+0x4f8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a8a      	ldr	r2, [pc, #552]	; (80027b8 <HAL_RCC_OscConfig+0x4f8>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002596:	f7ff fbb9 	bl	8001d0c <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7ff fbb5 	bl	8001d0c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b64      	cmp	r3, #100	; 0x64
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0fd      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	4b81      	ldr	r3, [pc, #516]	; (80027b8 <HAL_RCC_OscConfig+0x4f8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x312>
 80025c4:	4b7b      	ldr	r3, [pc, #492]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4a7a      	ldr	r2, [pc, #488]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6213      	str	r3, [r2, #32]
 80025d0:	e02d      	b.n	800262e <HAL_RCC_OscConfig+0x36e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x334>
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	4a75      	ldr	r2, [pc, #468]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	6213      	str	r3, [r2, #32]
 80025e6:	4b73      	ldr	r3, [pc, #460]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	4a72      	ldr	r2, [pc, #456]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	6213      	str	r3, [r2, #32]
 80025f2:	e01c      	b.n	800262e <HAL_RCC_OscConfig+0x36e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	d10c      	bne.n	8002616 <HAL_RCC_OscConfig+0x356>
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	4a6c      	ldr	r2, [pc, #432]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	6213      	str	r3, [r2, #32]
 8002608:	4b6a      	ldr	r3, [pc, #424]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4a69      	ldr	r2, [pc, #420]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	e00b      	b.n	800262e <HAL_RCC_OscConfig+0x36e>
 8002616:	4b67      	ldr	r3, [pc, #412]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4a66      	ldr	r2, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6213      	str	r3, [r2, #32]
 8002622:	4b64      	ldr	r3, [pc, #400]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a63      	ldr	r2, [pc, #396]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	f023 0304 	bic.w	r3, r3, #4
 800262c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d015      	beq.n	8002662 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002636:	f7ff fb69 	bl	8001d0c <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	e00a      	b.n	8002654 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263e:	f7ff fb65 	bl	8001d0c <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	f241 3288 	movw	r2, #5000	; 0x1388
 800264c:	4293      	cmp	r3, r2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e0ab      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ee      	beq.n	800263e <HAL_RCC_OscConfig+0x37e>
 8002660:	e014      	b.n	800268c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002662:	f7ff fb53 	bl	8001d0c <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002668:	e00a      	b.n	8002680 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7ff fb4f 	bl	8001d0c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f241 3288 	movw	r2, #5000	; 0x1388
 8002678:	4293      	cmp	r3, r2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e095      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002680:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ee      	bne.n	800266a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d105      	bne.n	800269e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002692:	4b48      	ldr	r3, [pc, #288]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4a47      	ldr	r2, [pc, #284]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8081 	beq.w	80027aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a8:	4b42      	ldr	r3, [pc, #264]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d061      	beq.n	8002778 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d146      	bne.n	800274a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026bc:	4b3f      	ldr	r3, [pc, #252]	; (80027bc <HAL_RCC_OscConfig+0x4fc>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c2:	f7ff fb23 	bl	8001d0c <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ca:	f7ff fb1f 	bl	8001d0c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e067      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f0      	bne.n	80026ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f0:	d108      	bne.n	8002704 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026f2:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	492d      	ldr	r1, [pc, #180]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002704:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a19      	ldr	r1, [r3, #32]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	430b      	orrs	r3, r1
 8002716:	4927      	ldr	r1, [pc, #156]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <HAL_RCC_OscConfig+0x4fc>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7ff faf3 	bl	8001d0c <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272a:	f7ff faef 	bl	8001d0c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e037      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800273c:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x46a>
 8002748:	e02f      	b.n	80027aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274a:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <HAL_RCC_OscConfig+0x4fc>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7ff fadc 	bl	8001d0c <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002758:	f7ff fad8 	bl	8001d0c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e020      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x498>
 8002776:	e018      	b.n	80027aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e013      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	429a      	cmp	r2, r3
 8002796:	d106      	bne.n	80027a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40007000 	.word	0x40007000
 80027bc:	42420060 	.word	0x42420060

080027c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0d0      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027d4:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d910      	bls.n	8002804 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b67      	ldr	r3, [pc, #412]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 0207 	bic.w	r2, r3, #7
 80027ea:	4965      	ldr	r1, [pc, #404]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0b8      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800281c:	4b59      	ldr	r3, [pc, #356]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002826:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002834:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800283e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	494d      	ldr	r1, [pc, #308]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d040      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d115      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287e:	4b41      	ldr	r3, [pc, #260]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e073      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288e:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06b      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289e:	4b39      	ldr	r3, [pc, #228]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f023 0203 	bic.w	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4936      	ldr	r1, [pc, #216]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b0:	f7ff fa2c 	bl	8001d0c <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b8:	f7ff fa28 	bl	8001d0c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e053      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 020c 	and.w	r2, r3, #12
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	429a      	cmp	r2, r3
 80028de:	d1eb      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e0:	4b27      	ldr	r3, [pc, #156]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d210      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b24      	ldr	r3, [pc, #144]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 0207 	bic.w	r2, r3, #7
 80028f6:	4922      	ldr	r1, [pc, #136]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e032      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4916      	ldr	r1, [pc, #88]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	490e      	ldr	r1, [pc, #56]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800294e:	f000 f821 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8002952:	4602      	mov	r2, r0
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	490a      	ldr	r1, [pc, #40]	; (8002988 <HAL_RCC_ClockConfig+0x1c8>)
 8002960:	5ccb      	ldrb	r3, [r1, r3]
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1cc>)
 8002968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x1d0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff f98a 	bl	8001c88 <HAL_InitTick>

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40022000 	.word	0x40022000
 8002984:	40021000 	.word	0x40021000
 8002988:	080032a0 	.word	0x080032a0
 800298c:	20000030 	.word	0x20000030
 8002990:	20000034 	.word	0x20000034

08002994 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029ae:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x94>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d002      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x30>
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x36>
 80029c2:	e027      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x98>)
 80029c6:	613b      	str	r3, [r7, #16]
      break;
 80029c8:	e027      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	0c9b      	lsrs	r3, r3, #18
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029d4:	5cd3      	ldrb	r3, [r2, r3]
 80029d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d010      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x94>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	0c5b      	lsrs	r3, r3, #17
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a0d      	ldr	r2, [pc, #52]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x98>)
 80029f6:	fb02 f203 	mul.w	r2, r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	e004      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a0c      	ldr	r2, [pc, #48]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a08:	fb02 f303 	mul.w	r3, r2, r3
 8002a0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	613b      	str	r3, [r7, #16]
      break;
 8002a12:	e002      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a16:	613b      	str	r3, [r7, #16]
      break;
 8002a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1a:	693b      	ldr	r3, [r7, #16]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	007a1200 	.word	0x007a1200
 8002a30:	080032b0 	.word	0x080032b0
 8002a34:	080032c0 	.word	0x080032c0
 8002a38:	003d0900 	.word	0x003d0900

08002a3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <RCC_Delay+0x34>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <RCC_Delay+0x38>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	0a5b      	lsrs	r3, r3, #9
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a58:	bf00      	nop
  }
  while (Delay --);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1e5a      	subs	r2, r3, #1
 8002a5e:	60fa      	str	r2, [r7, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f9      	bne.n	8002a58 <RCC_Delay+0x1c>
}
 8002a64:	bf00      	nop
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	20000030 	.word	0x20000030
 8002a74:	10624dd3 	.word	0x10624dd3

08002a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e041      	b.n	8002b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff f85a 	bl	8001b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f000 fa56 	bl	8002f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d001      	beq.n	8002b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e035      	b.n	8002b9c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a16      	ldr	r2, [pc, #88]	; (8002ba8 <HAL_TIM_Base_Start_IT+0x90>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d009      	beq.n	8002b66 <HAL_TIM_Base_Start_IT+0x4e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5a:	d004      	beq.n	8002b66 <HAL_TIM_Base_Start_IT+0x4e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a12      	ldr	r2, [pc, #72]	; (8002bac <HAL_TIM_Base_Start_IT+0x94>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d111      	bne.n	8002b8a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b06      	cmp	r3, #6
 8002b76:	d010      	beq.n	8002b9a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b88:	e007      	b.n	8002b9a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0201 	orr.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40012c00 	.word	0x40012c00
 8002bac:	40000400 	.word	0x40000400

08002bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d020      	beq.n	8002c14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01b      	beq.n	8002c14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0202 	mvn.w	r2, #2
 8002be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f998 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f98b 	bl	8002f1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f99a 	bl	8002f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d020      	beq.n	8002c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01b      	beq.n	8002c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0204 	mvn.w	r2, #4
 8002c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2202      	movs	r2, #2
 8002c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f972 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002c4c:	e005      	b.n	8002c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f965 	bl	8002f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f974 	bl	8002f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d020      	beq.n	8002cac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01b      	beq.n	8002cac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0208 	mvn.w	r2, #8
 8002c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2204      	movs	r2, #4
 8002c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f94c 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002c98:	e005      	b.n	8002ca6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f93f 	bl	8002f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f94e 	bl	8002f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d020      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01b      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0210 	mvn.w	r2, #16
 8002cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2208      	movs	r2, #8
 8002cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f926 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002ce4:	e005      	b.n	8002cf2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f919 	bl	8002f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f928 	bl	8002f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00c      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0201 	mvn.w	r2, #1
 8002d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe fb8a 	bl	8001430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00c      	beq.n	8002d40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d007      	beq.n	8002d40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa6f 	bl	800321e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00c      	beq.n	8002d64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d007      	beq.n	8002d64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f8f8 	bl	8002f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00c      	beq.n	8002d88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d007      	beq.n	8002d88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0220 	mvn.w	r2, #32
 8002d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fa42 	bl	800320c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_TIM_ConfigClockSource+0x1c>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e0b4      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x186>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de4:	d03e      	beq.n	8002e64 <HAL_TIM_ConfigClockSource+0xd4>
 8002de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dea:	f200 8087 	bhi.w	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df2:	f000 8086 	beq.w	8002f02 <HAL_TIM_ConfigClockSource+0x172>
 8002df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfa:	d87f      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002dfc:	2b70      	cmp	r3, #112	; 0x70
 8002dfe:	d01a      	beq.n	8002e36 <HAL_TIM_ConfigClockSource+0xa6>
 8002e00:	2b70      	cmp	r3, #112	; 0x70
 8002e02:	d87b      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002e04:	2b60      	cmp	r3, #96	; 0x60
 8002e06:	d050      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0x11a>
 8002e08:	2b60      	cmp	r3, #96	; 0x60
 8002e0a:	d877      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002e0c:	2b50      	cmp	r3, #80	; 0x50
 8002e0e:	d03c      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0xfa>
 8002e10:	2b50      	cmp	r3, #80	; 0x50
 8002e12:	d873      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d058      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0x13a>
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	d86f      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002e1c:	2b30      	cmp	r3, #48	; 0x30
 8002e1e:	d064      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x15a>
 8002e20:	2b30      	cmp	r3, #48	; 0x30
 8002e22:	d86b      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d060      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x15a>
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d867      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d05c      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x15a>
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d05a      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x15a>
 8002e34:	e062      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	6899      	ldr	r1, [r3, #8]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f000 f96a 	bl	800311e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	609a      	str	r2, [r3, #8]
      break;
 8002e62:	e04f      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	6899      	ldr	r1, [r3, #8]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f000 f953 	bl	800311e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e86:	609a      	str	r2, [r3, #8]
      break;
 8002e88:	e03c      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	461a      	mov	r2, r3
 8002e98:	f000 f8ca 	bl	8003030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2150      	movs	r1, #80	; 0x50
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f921 	bl	80030ea <TIM_ITRx_SetConfig>
      break;
 8002ea8:	e02c      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6859      	ldr	r1, [r3, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f000 f8e8 	bl	800308c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2160      	movs	r1, #96	; 0x60
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f911 	bl	80030ea <TIM_ITRx_SetConfig>
      break;
 8002ec8:	e01c      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6859      	ldr	r1, [r3, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f000 f8aa 	bl	8003030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2140      	movs	r1, #64	; 0x40
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f901 	bl	80030ea <TIM_ITRx_SetConfig>
      break;
 8002ee8:	e00c      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	f000 f8f8 	bl	80030ea <TIM_ITRx_SetConfig>
      break;
 8002efa:	e003      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
      break;
 8002f00:	e000      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
	...

08002f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a2b      	ldr	r2, [pc, #172]	; (8003028 <TIM_Base_SetConfig+0xc0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d007      	beq.n	8002f90 <TIM_Base_SetConfig+0x28>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d003      	beq.n	8002f90 <TIM_Base_SetConfig+0x28>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a28      	ldr	r2, [pc, #160]	; (800302c <TIM_Base_SetConfig+0xc4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d108      	bne.n	8002fa2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a20      	ldr	r2, [pc, #128]	; (8003028 <TIM_Base_SetConfig+0xc0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <TIM_Base_SetConfig+0x52>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d003      	beq.n	8002fba <TIM_Base_SetConfig+0x52>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1d      	ldr	r2, [pc, #116]	; (800302c <TIM_Base_SetConfig+0xc4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d108      	bne.n	8002fcc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a0d      	ldr	r2, [pc, #52]	; (8003028 <TIM_Base_SetConfig+0xc0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d103      	bne.n	8003000 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f023 0201 	bic.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	611a      	str	r2, [r3, #16]
  }
}
 800301e:	bf00      	nop
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	40012c00 	.word	0x40012c00
 800302c:	40000400 	.word	0x40000400

08003030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	f023 0201 	bic.w	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800305a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f023 030a 	bic.w	r3, r3, #10
 800306c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	621a      	str	r2, [r3, #32]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f023 0210 	bic.w	r2, r3, #16
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	031b      	lsls	r3, r3, #12
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	621a      	str	r2, [r3, #32]
}
 80030e0:	bf00      	nop
 80030e2:	371c      	adds	r7, #28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr

080030ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b085      	sub	sp, #20
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	f043 0307 	orr.w	r3, r3, #7
 800310c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	609a      	str	r2, [r3, #8]
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr

0800311e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800311e:	b480      	push	{r7}
 8003120:	b087      	sub	sp, #28
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003138:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	021a      	lsls	r2, r3, #8
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	431a      	orrs	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4313      	orrs	r3, r2
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	609a      	str	r2, [r3, #8]
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003170:	2302      	movs	r3, #2
 8003172:	e041      	b.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a14      	ldr	r2, [pc, #80]	; (8003204 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d009      	beq.n	80031cc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c0:	d004      	beq.n	80031cc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a10      	ldr	r2, [pc, #64]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d10c      	bne.n	80031e6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40012c00 	.word	0x40012c00
 8003208:	40000400 	.word	0x40000400

0800320c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <__libc_init_array>:
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	2600      	movs	r6, #0
 8003234:	4d0c      	ldr	r5, [pc, #48]	; (8003268 <__libc_init_array+0x38>)
 8003236:	4c0d      	ldr	r4, [pc, #52]	; (800326c <__libc_init_array+0x3c>)
 8003238:	1b64      	subs	r4, r4, r5
 800323a:	10a4      	asrs	r4, r4, #2
 800323c:	42a6      	cmp	r6, r4
 800323e:	d109      	bne.n	8003254 <__libc_init_array+0x24>
 8003240:	f000 f822 	bl	8003288 <_init>
 8003244:	2600      	movs	r6, #0
 8003246:	4d0a      	ldr	r5, [pc, #40]	; (8003270 <__libc_init_array+0x40>)
 8003248:	4c0a      	ldr	r4, [pc, #40]	; (8003274 <__libc_init_array+0x44>)
 800324a:	1b64      	subs	r4, r4, r5
 800324c:	10a4      	asrs	r4, r4, #2
 800324e:	42a6      	cmp	r6, r4
 8003250:	d105      	bne.n	800325e <__libc_init_array+0x2e>
 8003252:	bd70      	pop	{r4, r5, r6, pc}
 8003254:	f855 3b04 	ldr.w	r3, [r5], #4
 8003258:	4798      	blx	r3
 800325a:	3601      	adds	r6, #1
 800325c:	e7ee      	b.n	800323c <__libc_init_array+0xc>
 800325e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003262:	4798      	blx	r3
 8003264:	3601      	adds	r6, #1
 8003266:	e7f2      	b.n	800324e <__libc_init_array+0x1e>
 8003268:	080032c4 	.word	0x080032c4
 800326c:	080032c4 	.word	0x080032c4
 8003270:	080032c4 	.word	0x080032c4
 8003274:	080032c8 	.word	0x080032c8

08003278 <memset>:
 8003278:	4603      	mov	r3, r0
 800327a:	4402      	add	r2, r0
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <memset+0xa>
 8003280:	4770      	bx	lr
 8003282:	f803 1b01 	strb.w	r1, [r3], #1
 8003286:	e7f9      	b.n	800327c <memset+0x4>

08003288 <_init>:
 8003288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328a:	bf00      	nop
 800328c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328e:	bc08      	pop	{r3}
 8003290:	469e      	mov	lr, r3
 8003292:	4770      	bx	lr

08003294 <_fini>:
 8003294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003296:	bf00      	nop
 8003298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329a:	bc08      	pop	{r3}
 800329c:	469e      	mov	lr, r3
 800329e:	4770      	bx	lr
